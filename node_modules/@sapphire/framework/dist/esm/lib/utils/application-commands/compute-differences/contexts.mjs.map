{"version":3,"sources":["../../../../../../src/lib/utils/application-commands/compute-differences/contexts.ts"],"names":[],"mappings":";;;AAGO,UAAU,4BAAA,CAChB,kBACA,WAAA,EAC+B;AAE/B,EAAA,IAAI,CAAC,gBAAA,IAAoB,WAAA,EAAa,MAAA,EAAQ;AAC7C,IAAA,MAAM;AAAA,MACL,GAAA,EAAK,UAAA;AAAA,MACL,QAAA,EAAU,qBAAA;AAAA,MACV,QAAA,EAAU;AAAA,KACX;AAAA,EACD,CAAA,MAAA,IAES,gBAAA,EAAkB,MAAA,IAAU,CAAC,aAAa,MAAA,EAAQ;AAC1D,IAAA,MAAM;AAAA,MACL,GAAA,EAAK,UAAA;AAAA,MACL,QAAA,EAAU,kBAAA;AAAA,MACV,QAAA,EAAU;AAAA,KACX;AAAA,EACD,CAAA,MAAA,IAES,aAAa,MAAA,EAAQ;AAC7B,IAAA,IAAI,KAAA,GAAQ,CAAA;AAEZ,IAAA,KAAA,MAAW,cAAc,WAAA,EAAa;AACrC,MAAA,MAAM,YAAA,GAAe,KAAA,EAAA;AAErB,MAAA,IAAI,gBAAA,CAAkB,YAAY,CAAA,KAAM,UAAA,EAAY;AACnD,QAAA,MAAM;AAAA,UACL,GAAA,EAAK,YAAY,YAAY,CAAA,CAAA,CAAA;AAAA,UAC7B,QAAA,EAAU,CAAA,cAAA,EAAiB,gBAAA,GAAmB,YAAY,CAAC,CAAA,CAAA;AAAA,UAC3D,QAAA,EAAU,iBAAiB,UAAU,CAAA;AAAA,SACtC;AAAA,MACD;AAAA,IACD;AAEA,IAAA,IAAI,KAAA,GAAQ,iBAAkB,MAAA,EAAQ;AACrC,MAAA,IAAI,IAAA;AAEJ,MAAA,OAAA,CAAQ,IAAA,GAAO,gBAAA,CAAkB,KAAK,CAAA,MAAO,MAAA,EAAW;AACvD,QAAA,MAAM;AAAA,UACL,GAAA,EAAK,YAAY,KAAK,CAAA,CAAA,CAAA;AAAA,UACtB,QAAA,EAAU,WAAW,IAAI,CAAA,QAAA,CAAA;AAAA,UACzB,QAAA,EAAU,CAAA,kBAAA;AAAA,SACX;AAEA,QAAA,KAAA,EAAA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAlDiB,MAAA,CAAA,4BAAA,EAAA,8BAAA,CAAA","file":"contexts.mjs","sourcesContent":["import type { InteractionContextType } from 'discord.js';\nimport type { CommandDifference } from './_shared';\n\nexport function* checkInteractionContextTypes(\n\texistingContexts?: InteractionContextType[],\n\tnewContexts?: InteractionContextType[]\n): Generator<CommandDifference> {\n\t// 0. No existing contexts and now we have contexts\n\tif (!existingContexts && newContexts?.length) {\n\t\tyield {\n\t\t\tkey: 'contexts',\n\t\t\toriginal: 'no contexts present',\n\t\t\texpected: 'contexts present'\n\t\t};\n\t}\n\t// 1. Existing contexts and now we have no contexts\n\telse if (existingContexts?.length && !newContexts?.length) {\n\t\tyield {\n\t\t\tkey: 'contexts',\n\t\t\toriginal: 'contexts present',\n\t\t\texpected: 'no contexts present'\n\t\t};\n\t}\n\t// 2. Maybe changes in order or additions, log\n\telse if (newContexts?.length) {\n\t\tlet index = 0;\n\n\t\tfor (const newContext of newContexts) {\n\t\t\tconst currentIndex = index++;\n\n\t\t\tif (existingContexts![currentIndex] !== newContext) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `contexts[${currentIndex}]`,\n\t\t\t\t\toriginal: `contexts type ${existingContexts?.[currentIndex]}`,\n\t\t\t\t\texpected: `contexts type ${newContext}`\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (index < existingContexts!.length) {\n\t\t\tlet type: InteractionContextType;\n\n\t\t\twhile ((type = existingContexts![index]) !== undefined) {\n\t\t\t\tyield {\n\t\t\t\t\tkey: `contexts[${index}]`,\n\t\t\t\t\toriginal: `context ${type} present`,\n\t\t\t\t\texpected: `no context present`\n\t\t\t\t};\n\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}