{"version":3,"sources":["../../../../../src/lib/utils/application-commands/ApplicationCommandRegistry.ts"],"names":[],"mappings":"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","file":"ApplicationCommandRegistry.mjs","sourcesContent":["import type {\n\tContextMenuCommandBuilder,\n\tSlashCommandBuilder,\n\tSlashCommandOptionsOnlyBuilder,\n\tSlashCommandSubcommandsOnlyBuilder\n} from '@discordjs/builders';\nimport { container } from '@sapphire/pieces';\nimport { isNullishOrEmpty } from '@sapphire/utilities';\nimport {\n\tApplicationCommandType,\n\ttype RESTPostAPIChatInputApplicationCommandsJSONBody,\n\ttype RESTPostAPIContextMenuApplicationCommandsJSONBody\n} from 'discord-api-types/v10';\nimport {\n\tCollection,\n\ttype ApplicationCommand,\n\ttype ApplicationCommandManager,\n\ttype ChatInputApplicationCommandData,\n\ttype MessageApplicationCommandData,\n\ttype UserApplicationCommandData\n} from 'discord.js';\nimport type { Args } from '../../parsers/Args';\nimport type { Command } from '../../structures/Command';\nimport type { CommandOptions } from '../../types/CommandTypes';\nimport { InternalRegistryAPIType, RegisterBehavior } from '../../types/Enums';\nimport { allGuildIdsToFetchCommandsFor, getDefaultBehaviorWhenNotIdentical, getDefaultGuildIds } from './ApplicationCommandRegistries';\nimport type { CommandDifference } from './compute-differences/_shared';\nimport { getCommandDifferences, getCommandDifferencesFast } from './computeDifferences';\nimport { convertApplicationCommandToApiData, normalizeChatInputCommand, normalizeContextMenuCommand } from './normalizeInputs';\n\nexport class ApplicationCommandRegistry {\n\t/**\n\t * The piece this registry is for.\n\t */\n\tpublic readonly commandName: string;\n\n\t/**\n\t * A set of all chat input command names and ids that point to this registry.\n\t * You should not use this field directly, but instead use {@link ApplicationCommandRegistry.globalChatInputCommandIds}\n\t */\n\tpublic readonly chatInputCommands = new Set<string>();\n\n\t/**\n\t * A set of all context menu command names and ids that point to this registry.\n\t * You should not use this field directly, but instead use {@link ApplicationCommandRegistry.globalContextMenuCommandIds}\n\t */\n\tpublic readonly contextMenuCommands = new Set<string>();\n\n\t/**\n\t * The guild ids that we need to fetch the commands for.\n\t */\n\tpublic readonly guildIdsToFetch = new Set<string>();\n\n\t/**\n\t * The global slash command id for this command.\n\t * @deprecated This field will only show the first global command id registered for this registry.\n\t * Use {@link ApplicationCommandRegistry.globalChatInputCommandIds} instead.\n\t */\n\tpublic globalCommandId: string | null = null;\n\n\t/**\n\t * A set of all registered and valid global chat input command ids that point to this registry.\n\t */\n\tpublic readonly globalChatInputCommandIds = new Set<string>();\n\n\t/**\n\t * A set of all registered and valid global context menu command ids that point to this registry.\n\t */\n\tpublic readonly globalContextMenuCommandIds = new Set<string>();\n\n\t/**\n\t * The guild command ids for this command.\n\t * @deprecated This field will only show the first guild command id registered for this registry per guild.\n\t * Use {@link ApplicationCommandRegistry.guildIdToChatInputCommandIds} and {@link ApplicationCommandRegistry.guildIdToContextMenuCommandIds} instead.\n\t */\n\tpublic readonly guildCommandIds = new Collection<string, string>();\n\n\t/**\n\t * A map of guild ids to a set of registered and valid chat input command ids that point to this registry.\n\t */\n\tpublic readonly guildIdToChatInputCommandIds = new Collection<string, Set<string>>();\n\n\t/**\n\t * A map of guild ids to a set of registered and valid context menu command ids that point to this registry.\n\t */\n\tpublic readonly guildIdToContextMenuCommandIds = new Collection<string, Set<string>>();\n\n\tprivate readonly apiCalls: InternalAPICall[] = [];\n\n\tpublic constructor(commandName: string) {\n\t\tthis.commandName = commandName;\n\t}\n\n\tpublic get command(): Command<Args, CommandOptions> | undefined {\n\t\treturn container.stores.get('commands').get(this.commandName);\n\t}\n\n\tpublic registerChatInputCommand(\n\t\tcommand:\n\t\t\t| ChatInputApplicationCommandData\n\t\t\t| SlashCommandBuilder\n\t\t\t| SlashCommandSubcommandsOnlyBuilder\n\t\t\t| SlashCommandOptionsOnlyBuilder\n\t\t\t| Omit<SlashCommandBuilder, 'addSubcommand' | 'addSubcommandGroup'>\n\t\t\t| ((builder: SlashCommandBuilder) => unknown),\n\t\toptions?: ApplicationCommandRegistryRegisterOptions\n\t) {\n\t\tconst builtData = normalizeChatInputCommand(command);\n\n\t\tthis.chatInputCommands.add(builtData.name);\n\n\t\tconst guildIdsToRegister = this.getGuildIdsToRegister(options);\n\n\t\tconst registerOptions = {\n\t\t\tregisterCommandIfMissing: true,\n\t\t\tbehaviorWhenNotIdentical: getDefaultBehaviorWhenNotIdentical(),\n\t\t\tguildIds: guildIdsToRegister,\n\t\t\t...(options ?? {})\n\t\t};\n\n\t\tthis.apiCalls.push({\n\t\t\tbuiltData,\n\t\t\tregisterOptions,\n\t\t\ttype: InternalRegistryAPIType.ChatInput\n\t\t});\n\n\t\tif (options?.idHints) {\n\t\t\tfor (const hint of options.idHints) {\n\t\t\t\tthis.chatInputCommands.add(hint);\n\t\t\t}\n\t\t}\n\n\t\tthis.processGuildIds(guildIdsToRegister);\n\n\t\treturn this;\n\t}\n\n\tpublic registerContextMenuCommand(\n\t\tcommand:\n\t\t\t| UserApplicationCommandData\n\t\t\t| MessageApplicationCommandData\n\t\t\t| ContextMenuCommandBuilder\n\t\t\t| ((builder: ContextMenuCommandBuilder) => unknown),\n\t\toptions?: ApplicationCommandRegistryRegisterOptions\n\t) {\n\t\tconst builtData = normalizeContextMenuCommand(command);\n\n\t\tthis.contextMenuCommands.add(builtData.name);\n\n\t\tconst guildIdsToRegister = this.getGuildIdsToRegister(options);\n\n\t\tconst registerOptions = {\n\t\t\tregisterCommandIfMissing: true,\n\t\t\tbehaviorWhenNotIdentical: getDefaultBehaviorWhenNotIdentical(),\n\t\t\tguildIds: guildIdsToRegister,\n\t\t\t...(options ?? {})\n\t\t};\n\n\t\tthis.apiCalls.push({\n\t\t\tbuiltData,\n\t\t\tregisterOptions,\n\t\t\ttype: InternalRegistryAPIType.ContextMenu\n\t\t});\n\n\t\tif (options?.idHints) {\n\t\t\tfor (const hint of options.idHints) {\n\t\t\t\tthis.contextMenuCommands.add(hint);\n\t\t\t}\n\t\t}\n\n\t\tthis.processGuildIds(guildIdsToRegister);\n\n\t\treturn this;\n\t}\n\n\tpublic addChatInputCommandNames(...names: string[] | string[][]) {\n\t\tconst flattened = names.flat(Infinity) as string[];\n\n\t\tfor (const command of flattened) {\n\t\t\tthis.debug(`Registering name \"${command}\" to internal chat input map`);\n\t\t\tthis.warn(\n\t\t\t\t`Registering the chat input command \"${command}\" using a name is not recommended.`,\n\t\t\t\t'Please use the \"addChatInputCommandIds\" method instead with a command id.'\n\t\t\t);\n\t\t\tthis.chatInputCommands.add(command);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tpublic addContextMenuCommandNames(...names: string[] | string[][]) {\n\t\tconst flattened = names.flat(Infinity) as string[];\n\n\t\tfor (const command of flattened) {\n\t\t\tthis.debug(`Registering name \"${command}\" to internal context menu map`);\n\t\t\tthis.warn(\n\t\t\t\t`Registering the context menu command \"${command}\" using a name is not recommended.`,\n\t\t\t\t'Please use the \"addContextMenuCommandIds\" method instead with a command id.'\n\t\t\t);\n\t\t\tthis.contextMenuCommands.add(command);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tpublic addChatInputCommandIds(...commandIds: string[] | string[][]) {\n\t\tconst flattened = commandIds.flat(Infinity) as string[];\n\n\t\tfor (const entry of flattened) {\n\t\t\ttry {\n\t\t\t\tBigInt(entry);\n\t\t\t\tthis.debug(`Registering id \"${entry}\" to internal chat input map`);\n\t\t\t} catch {\n\t\t\t\t// Don't be silly, save yourself the headaches and do as we say\n\t\t\t\tthis.debug(`Registering name \"${entry}\" to internal chat input map`);\n\t\t\t\tthis.warn(\n\t\t\t\t\t`Registering the chat input command \"${entry}\" using a name *and* trying to bypass this warning by calling \"addChatInputCommandIds\" is not recommended.`,\n\t\t\t\t\t'Please use the \"addChatInputCommandIds\" method with a valid command id instead.'\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.chatInputCommands.add(entry);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tpublic addContextMenuCommandIds(...commandIds: string[] | string[][]) {\n\t\tconst flattened = commandIds.flat(Infinity) as string[];\n\n\t\tfor (const entry of flattened) {\n\t\t\ttry {\n\t\t\t\tBigInt(entry);\n\t\t\t\tthis.debug(`Registering id \"${entry}\" to internal context menu map`);\n\t\t\t} catch {\n\t\t\t\tthis.debug(`Registering name \"${entry}\" to internal context menu map`);\n\t\t\t\t// Don't be silly, save yourself the headaches and do as we say\n\t\t\t\tthis.warn(\n\t\t\t\t\t`Registering the context menu command \"${entry}\" using a name *and* trying to bypass this warning by calling \"addContextMenuCommandIds\" is not recommended.`,\n\t\t\t\t\t'Please use the \"addContextMenuCommandIds\" method with a valid command id instead.'\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.contextMenuCommands.add(entry);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected async runAPICalls(\n\t\tapplicationCommands: ApplicationCommandManager,\n\t\tglobalCommands: Collection<string, ApplicationCommand>,\n\t\tguildCommands: Map<string, Collection<string, ApplicationCommand>>\n\t) {\n\t\t// Early return for no API calls\n\t\tif (this.apiCalls.length === 0) {\n\t\t\t// If we have no API calls to do then we simply return (can happen if the registry is used directly)\n\t\t\tthis.trace('No API calls to run, and no command to register');\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (getDefaultBehaviorWhenNotIdentical() === RegisterBehavior.BulkOverwrite) {\n\t\t\tthrow new RangeError(\n\t\t\t\t`\"runAPICalls\" was called for \"${this.commandName}\" but the defaultBehaviorWhenNotIdentical is \"BulkOverwrite\". This should not happen.`\n\t\t\t);\n\t\t}\n\n\t\tthis.debug(`Preparing to process ${this.apiCalls.length} possible command registrations / updates...`);\n\n\t\tconst results = await Promise.allSettled(\n\t\t\tthis.apiCalls.map((call) => this.handleAPICall(applicationCommands, globalCommands, guildCommands, call))\n\t\t);\n\n\t\tconst errored = results.filter((result) => result.status === 'rejected') as PromiseRejectedResult[];\n\n\t\tif (errored.length) {\n\t\t\tthis.error(`Received ${errored.length} errors while processing command registrations / updates`);\n\n\t\t\tfor (const error of errored) {\n\t\t\t\tthis.error(error.reason.stack ?? error.reason);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected handleIdAddition(type: InternalRegistryAPIType, id: string, guildId?: string | null) {\n\t\tswitch (type) {\n\t\t\tcase InternalRegistryAPIType.ChatInput: {\n\t\t\t\tthis.addChatInputCommandIds(id);\n\n\t\t\t\tif (guildId) {\n\t\t\t\t\tthis.guildIdToChatInputCommandIds.ensure(guildId, () => new Set()).add(id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.globalChatInputCommandIds.add(id);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase InternalRegistryAPIType.ContextMenu: {\n\t\t\t\tthis.addContextMenuCommandIds(id);\n\n\t\t\t\tif (guildId) {\n\t\t\t\t\tthis.guildIdToContextMenuCommandIds.ensure(guildId, () => new Set()).add(id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.globalContextMenuCommandIds.add(id);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Old field handling\n\t\tif (guildId) {\n\t\t\t// Old, wrongly typed field (thx kyra for spotting >_>)\n\t\t\tif (!this.guildCommandIds.has(guildId)) {\n\t\t\t\tthis.guildCommandIds.set(guildId, id);\n\t\t\t}\n\t\t} else {\n\t\t\t// First come, first serve (thx kyra for spotting >_>)\n\t\t\tthis.globalCommandId ??= id;\n\t\t}\n\t}\n\n\tprivate getGuildIdsToRegister(options?: ApplicationCommandRegistryRegisterOptions) {\n\t\tlet guildIdsToRegister: ApplicationCommandRegistry.RegisterOptions['guildIds'] = undefined;\n\n\t\tif (!isNullishOrEmpty(options?.guildIds)) {\n\t\t\tguildIdsToRegister = options!.guildIds;\n\t\t} else if (!isNullishOrEmpty(getDefaultGuildIds())) {\n\t\t\tguildIdsToRegister = getDefaultGuildIds();\n\t\t}\n\n\t\treturn guildIdsToRegister;\n\t}\n\n\tprivate processGuildIds(guildIdsToRegister: ApplicationCommandRegistry.RegisterOptions['guildIds']) {\n\t\tif (!isNullishOrEmpty(guildIdsToRegister)) {\n\t\t\tfor (const id of guildIdsToRegister) {\n\t\t\t\tthis.guildIdsToFetch.add(id);\n\t\t\t\tallGuildIdsToFetchCommandsFor.add(id);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async handleAPICall(\n\t\tcommandsManager: ApplicationCommandManager,\n\t\tglobalCommands: Collection<string, ApplicationCommand>,\n\t\tallGuildsCommands: Map<string, Collection<string, ApplicationCommand>>,\n\t\tapiCall: InternalAPICall\n\t) {\n\t\tconst { builtData, registerOptions } = apiCall;\n\t\tconst commandName = builtData.name;\n\t\tconst behaviorIfNotEqual = registerOptions.behaviorWhenNotIdentical ?? getDefaultBehaviorWhenNotIdentical();\n\n\t\tconst findCallback = (entry: ApplicationCommand) => {\n\t\t\t// If the command is a chat input command, we need to check if the entry is a chat input command\n\t\t\tif (apiCall.type === InternalRegistryAPIType.ChatInput && entry.type !== ApplicationCommandType.ChatInput) return false;\n\t\t\t// If the command is a context menu command, we need to check if the entry is a context menu command of the same type\n\t\t\tif (apiCall.type === InternalRegistryAPIType.ContextMenu) {\n\t\t\t\t// If its a chat input command, it doesn't match\n\t\t\t\tif (entry.type === ApplicationCommandType.ChatInput) return false;\n\t\t\t\t// Check the command type (must match)\n\t\t\t\tif (apiCall.builtData.type !== entry.type) return false;\n\t\t\t}\n\n\t\t\t// Find the command by name or by id hint (mostly useful for context menus)\n\t\t\tconst isInIdHint = registerOptions.idHints?.includes(entry.id);\n\t\t\treturn typeof isInIdHint === 'boolean' ? isInIdHint || entry.name === commandName : entry.name === commandName;\n\t\t};\n\n\t\tlet type: string;\n\n\t\tswitch (apiCall.type) {\n\t\t\tcase InternalRegistryAPIType.ChatInput:\n\t\t\t\ttype = 'chat input';\n\t\t\t\tbreak;\n\t\t\tcase InternalRegistryAPIType.ContextMenu:\n\t\t\t\tswitch (apiCall.builtData.type) {\n\t\t\t\t\tcase ApplicationCommandType.Message:\n\t\t\t\t\t\ttype = 'message context menu';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ApplicationCommandType.User:\n\t\t\t\t\t\ttype = 'user context menu';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttype = 'unknown-type context menu';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttype = 'unknown';\n\t\t}\n\n\t\tif (!registerOptions.guildIds?.length) {\n\t\t\tconst globalCommand = globalCommands.find(findCallback);\n\n\t\t\tif (globalCommand) {\n\t\t\t\tthis.debug(`Checking if command \"${commandName}\" is identical with global ${type} command with id \"${globalCommand.id}\"`);\n\t\t\t\tthis.handleIdAddition(apiCall.type, globalCommand.id);\n\t\t\t\tawait this.handleCommandPresent(globalCommand, builtData, behaviorIfNotEqual, null);\n\t\t\t} else if (registerOptions.registerCommandIfMissing ?? true) {\n\t\t\t\tthis.debug(`Creating new global ${type} command with name \"${commandName}\"`);\n\t\t\t\tawait this.createMissingCommand(commandsManager, builtData, type);\n\t\t\t} else {\n\t\t\t\tthis.debug(`Doing nothing about missing global ${type} command with name \"${commandName}\"`);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const guildId of registerOptions.guildIds) {\n\t\t\tconst guildCommands = allGuildsCommands.get(guildId);\n\n\t\t\tif (!guildCommands) {\n\t\t\t\tthis.debug(`There are no commands for guild with id \"${guildId}\". Will create ${type} command \"${commandName}\".`);\n\t\t\t\tawait this.createMissingCommand(commandsManager, builtData, type, guildId);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst existingGuildCommand = guildCommands.find(findCallback);\n\n\t\t\tif (existingGuildCommand) {\n\t\t\t\tthis.debug(`Checking if guild ${type} command \"${commandName}\" is identical to command \"${existingGuildCommand.id}\"`);\n\t\t\t\tthis.handleIdAddition(apiCall.type, existingGuildCommand.id, guildId);\n\t\t\t\tawait this.handleCommandPresent(existingGuildCommand, builtData, behaviorIfNotEqual, guildId);\n\t\t\t} else if (registerOptions.registerCommandIfMissing ?? true) {\n\t\t\t\tthis.debug(`Creating new guild ${type} command with name \"${commandName}\" for guild \"${guildId}\"`);\n\t\t\t\tawait this.createMissingCommand(commandsManager, builtData, type, guildId);\n\t\t\t} else {\n\t\t\t\tthis.debug(`Doing nothing about missing guild ${type} command with name \"${commandName}\" for guild \"${guildId}\"`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async handleCommandPresent(\n\t\tapplicationCommand: ApplicationCommand,\n\t\tapiData: InternalAPICall['builtData'],\n\t\tbehaviorIfNotEqual: RegisterBehavior,\n\t\tguildId: string | null\n\t) {\n\t\tif (behaviorIfNotEqual === RegisterBehavior.BulkOverwrite) {\n\t\t\tthis.debug(\n\t\t\t\t`Command \"${this.commandName}\" has the behaviorIfNotEqual set to \"BulkOverwrite\" which is invalid. Using defaultBehaviorWhenNotIdentical instead`\n\t\t\t);\n\n\t\t\tbehaviorIfNotEqual = getDefaultBehaviorWhenNotIdentical();\n\n\t\t\tif (behaviorIfNotEqual === RegisterBehavior.BulkOverwrite) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Invalid behaviorIfNotEqual value (\"BulkOverwrite\") for command \"${this.commandName}\", and defaultBehaviorWhenNotIdentical is also \"BulkOverwrite\". This should not happen.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tlet differences: CommandDifference[] = [];\n\n\t\tif (behaviorIfNotEqual === RegisterBehavior.VerboseOverwrite) {\n\t\t\tconst now = Date.now();\n\n\t\t\t// Step 0: compute differences\n\t\t\tdifferences = [...getCommandDifferences(convertApplicationCommandToApiData(applicationCommand), apiData, guildId !== null)];\n\n\t\t\tconst later = Date.now() - now;\n\t\t\tthis.debug(`Took ${later}ms to process differences via computing differences`);\n\n\t\t\t// Step 1: if there are no differences, return\n\t\t\tif (!differences.length) {\n\t\t\t\tthis.debug(\n\t\t\t\t\t`${guildId ? 'Guild command' : 'Command'} \"${apiData.name}\" is identical to command \"${applicationCommand.name}\" (${\n\t\t\t\t\t\tapplicationCommand.id\n\t\t\t\t\t})`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Run the fast path even if the user wants to just log if the command has a difference\n\t\tif (behaviorIfNotEqual === RegisterBehavior.Overwrite || behaviorIfNotEqual === RegisterBehavior.LogToConsole) {\n\t\t\tconst now = Date.now();\n\n\t\t\t// Step 0: compute differences\n\t\t\tconst areThereDifferences = getCommandDifferencesFast(convertApplicationCommandToApiData(applicationCommand), apiData, guildId !== null);\n\n\t\t\tconst later = Date.now() - now;\n\t\t\tthis.debug(`Took ${later}ms to process differences via fast compute differences`);\n\n\t\t\t// Step 1: if there are no differences, return\n\t\t\tif (!areThereDifferences) {\n\t\t\t\tthis.debug(\n\t\t\t\t\t`${guildId ? 'Guild command' : 'Command'} \"${apiData.name}\" is identical to command \"${applicationCommand.name}\" (${\n\t\t\t\t\t\tapplicationCommand.id\n\t\t\t\t\t})`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.logCommandDifferencesFound(applicationCommand, behaviorIfNotEqual === RegisterBehavior.LogToConsole, differences);\n\n\t\t// Step 2: if the behavior is to log to console, only log the differences\n\t\tif (behaviorIfNotEqual === RegisterBehavior.LogToConsole) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Step 3: if the behavior is to update, update the command\n\t\ttry {\n\t\t\tawait applicationCommand.edit(apiData as ChatInputApplicationCommandData);\n\t\t\tthis.debug(`Updated command ${applicationCommand.name} (${applicationCommand.id}) with new api data`);\n\t\t} catch (error) {\n\t\t\tthis.error(`Failed to update command ${applicationCommand.name} (${applicationCommand.id})`, error);\n\t\t}\n\t}\n\n\tprivate logCommandDifferencesFound(applicationCommand: ApplicationCommand, logAsWarn: boolean, differences: CommandDifference[]) {\n\t\tconst finalMessage: string[] = [];\n\t\tconst pad = ' '.repeat(5);\n\n\t\tfor (const difference of differences) {\n\t\t\tfinalMessage.push(\n\t\t\t\t[\n\t\t\t\t\t`└── At path: ${difference.key}`, //\n\t\t\t\t\t`${pad}├── Received: ${difference.original}`,\n\t\t\t\t\t`${pad}└── Expected: ${difference.expected}`,\n\t\t\t\t\t''\n\t\t\t\t].join('\\n')\n\t\t\t);\n\t\t}\n\n\t\tconst finalMessageNewLine = finalMessage.length ? '\\n' : '';\n\t\tconst header = `Found differences for command \"${applicationCommand.name}\" (${applicationCommand.id}) versus provided api data.${finalMessageNewLine}`;\n\n\t\tlogAsWarn ? this.warn(header, ...finalMessage) : this.debug(header, ...finalMessage);\n\t}\n\n\tprivate async createMissingCommand(\n\t\tcommandsManager: ApplicationCommandManager,\n\t\tapiData: InternalAPICall['builtData'],\n\t\ttype: string,\n\t\tguildId?: string\n\t) {\n\t\ttry {\n\t\t\tconst result = await commandsManager.create(apiData, guildId);\n\n\t\t\tthis.info(\n\t\t\t\t`Successfully created ${type}${guildId ? ' guild' : ''} command \"${apiData.name}\" with id \"${\n\t\t\t\t\tresult.id\n\t\t\t\t}\". You should add the id to the \"idHints\" property of the register method you used!`\n\t\t\t);\n\n\t\t\tswitch (apiData.type) {\n\t\t\t\tcase undefined:\n\t\t\t\tcase ApplicationCommandType.ChatInput: {\n\t\t\t\t\tthis.handleIdAddition(InternalRegistryAPIType.ChatInput, result.id, guildId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase ApplicationCommandType.Message:\n\t\t\t\tcase ApplicationCommandType.User: {\n\t\t\t\t\tthis.handleIdAddition(InternalRegistryAPIType.ContextMenu, result.id, guildId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis.error(\n\t\t\t\t`Failed to register${guildId ? ' guild' : ''} application command with name \"${apiData.name}\"${\n\t\t\t\t\tguildId ? ` for guild \"${guildId}\"` : ''\n\t\t\t\t}`,\n\t\t\t\terr\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate info(message: string, ...other: unknown[]) {\n\t\tcontainer.logger.info(`ApplicationCommandRegistry[${this.commandName}] ${message}`, ...other);\n\t}\n\n\tprivate error(message: string, ...other: unknown[]) {\n\t\tcontainer.logger.error(`ApplicationCommandRegistry[${this.commandName}] ${message}`, ...other);\n\t}\n\n\tprivate warn(message: string, ...other: unknown[]) {\n\t\tcontainer.logger.warn(`ApplicationCommandRegistry[${this.commandName}] ${message}`, ...other);\n\t}\n\n\tprivate debug(message: string, ...other: unknown[]) {\n\t\tcontainer.logger.debug(`ApplicationCommandRegistry[${this.commandName}] ${message}`, ...other);\n\t}\n\n\tprivate trace(message: string, ...other: unknown[]) {\n\t\tcontainer.logger.trace(`ApplicationCommandRegistry[${this.commandName}] ${message}`, ...other);\n\t}\n}\n\nexport namespace ApplicationCommandRegistry {\n\texport interface RegisterOptions {\n\t\t/**\n\t\t * If this is specified, the application commands will only be registered for these guild ids.\n\t\t */\n\t\tguildIds?: string[];\n\t\t/**\n\t\t * If we should register the command when it is missing\n\t\t * @default true\n\t\t */\n\t\tregisterCommandIfMissing?: boolean;\n\t\t/**\n\t\t * Specifies what we should do when the command is present, but not identical with the data you provided\n\t\t * @default `ApplicationCommandRegistries.getDefaultBehaviorWhenNotIdentical()`\n\t\t */\n\t\tbehaviorWhenNotIdentical?: Exclude<RegisterBehavior, RegisterBehavior.BulkOverwrite>;\n\t\t/**\n\t\t * Specifies a list of command ids that we should check in the event of a name mismatch\n\t\t * @default []\n\t\t */\n\t\tidHints?: string[];\n\t}\n}\n\nexport type ApplicationCommandRegistryRegisterOptions = ApplicationCommandRegistry.RegisterOptions;\n\ntype InternalRegisterOptions = Omit<ApplicationCommandRegistry.RegisterOptions, 'behaviorWhenNotIdentical'> & {\n\tbehaviorWhenNotIdentical?: RegisterBehavior;\n};\n\nexport type InternalAPICall =\n\t| {\n\t\t\tbuiltData: RESTPostAPIChatInputApplicationCommandsJSONBody;\n\t\t\tregisterOptions: InternalRegisterOptions;\n\t\t\ttype: InternalRegistryAPIType.ChatInput;\n\t  }\n\t| {\n\t\t\tbuiltData: RESTPostAPIContextMenuApplicationCommandsJSONBody;\n\t\t\tregisterOptions: InternalRegisterOptions;\n\t\t\ttype: InternalRegistryAPIType.ContextMenu;\n\t  };\n"]}