{"version":3,"sources":["../../../../../../src/lib/utils/application-commands/compute-differences/localizations.ts"],"names":[],"mappings":";;;AAGO,UAAU,kBAAA,CAAmB;AAAA,EACnC,aAAA;AAAA,EACA,oBAAA;AAAA,EACA,oBAAA;AAAA,EACA,6BAAA;AAAA,EACA;AACD,CAAA,EAMG;AACF,EAAA,IAAI,CAAC,iCAAiC,6BAAA,EAA+B;AACpE,IAAA,MAAM;AAAA,MACL,GAAA,EAAK,aAAA;AAAA,MACL,QAAA,EAAU,oBAAA;AAAA,MACV,QAAA,EAAU;AAAA,KACX;AAAA,EACD,CAAA,MAAA,IAAW,6BAAA,IAAiC,CAAC,6BAAA,EAA+B;AAC3E,IAAA,MAAM;AAAA,MACL,GAAA,EAAK,aAAA;AAAA,MACL,QAAA,EAAU,oBAAA;AAAA,MACV,QAAA,EAAU;AAAA,KACX;AAAA,EACD,CAAA,MAAA,IAAW,iCAAiC,6BAAA,EAA+B;AAC1E,IAAA,OAAO,gCAAA,CAAiC,6BAAA,EAA+B,6BAAA,EAA+B,aAAa,CAAA;AAAA,EACpH;AACD;AA5BiB,MAAA,CAAA,kBAAA,EAAA,oBAAA,CAAA;AA8BjB,UAAU,gCAAA,CACT,WAAA,EACA,WAAA,EACA,OAAA,EAC+B;AAC/B,EAAA,MAAM,wBAAwB,IAAI,GAAA,CAAI,MAAA,CAAO,OAAA,CAAQ,WAAW,CAAC,CAAA;AAEjE,EAAA,KAAA,MAAW,CAAC,GAAA,EAAK,KAAK,KAAK,MAAA,CAAO,OAAA,CAAQ,WAAW,CAAA,EAAG;AACvD,IAAA,MAAM,qBAAA,GAAwB,qBAAA,CAAsB,GAAA,CAAI,GAAG,CAAA;AAC3D,IAAA,qBAAA,CAAsB,OAAO,GAAG,CAAA;AAEhC,IAAA,MAAM,gBAAA,GAAmB,OAAO,qBAAA,KAA0B,WAAA;AAC1D,IAAA,MAAM,aAAa,KAAA,KAAU,IAAA;AAG7B,IAAA,IAAI,gBAAA,IAAoB,CAAC,UAAA,EAAY;AACpC,MAAA,MAAM;AAAA,QACL,GAAA,EAAK,CAAA,EAAG,OAAO,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA;AAAA,QACtB,QAAA,EAAU,yBAAA;AAAA,QACV,QAAA,EAAU;AAAA,OACX;AAAA,IACD,CAAA,MAAA,IAES,CAAC,gBAAA,IAAoB,UAAA,EAAY;AACzC,MAAA,MAAM;AAAA,QACL,GAAA,EAAK,CAAA,EAAG,OAAO,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA;AAAA,QACtB,QAAA,EAAU,qBAAA;AAAA,QACV,QAAA,EAAU;AAAA,OACX;AAAA,IACD,CAAA,MAAA,IAGS,0BAA0B,KAAA,EAAO;AACzC,MAAA,MAAM;AAAA,QACL,GAAA,EAAK,CAAA,EAAG,OAAO,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA;AAAA,QACtB,QAAA,EAAU,OAAO,qBAAqB,CAAA;AAAA,QACtC,QAAA,EAAU,OAAO,KAAK;AAAA,OACvB;AAAA,IACD;AAAA,EACD;AAGA,EAAA,KAAA,MAAW,CAAC,GAAA,EAAK,KAAK,CAAA,IAAK,qBAAA,EAAuB;AACjD,IAAA,IAAI,KAAA,EAAO;AACV,MAAA,MAAM;AAAA,QACL,GAAA,EAAK,CAAA,EAAG,OAAO,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA;AAAA,QACtB,QAAA,EAAU,KAAA;AAAA,QACV,QAAA,EAAU;AAAA,OACX;AAAA,IACD;AAAA,EACD;AACD;AAnDU,MAAA,CAAA,gCAAA,EAAA,kCAAA,CAAA","file":"localizations.mjs","sourcesContent":["import type { LocalizationMap } from 'discord-api-types/v10';\nimport type { CommandDifference } from './_shared';\n\nexport function* checkLocalizations({\n\tlocaleMapName,\n\tlocalePresentMessage,\n\tlocaleMissingMessage,\n\toriginalLocalizedDescriptions,\n\texpectedLocalizedDescriptions\n}: {\n\tlocaleMapName: string;\n\tlocalePresentMessage: string;\n\tlocaleMissingMessage: string;\n\toriginalLocalizedDescriptions?: LocalizationMap | null;\n\texpectedLocalizedDescriptions?: LocalizationMap | null;\n}) {\n\tif (!originalLocalizedDescriptions && expectedLocalizedDescriptions) {\n\t\tyield {\n\t\t\tkey: localeMapName,\n\t\t\toriginal: localeMissingMessage,\n\t\t\texpected: localePresentMessage\n\t\t};\n\t} else if (originalLocalizedDescriptions && !expectedLocalizedDescriptions) {\n\t\tyield {\n\t\t\tkey: localeMapName,\n\t\t\toriginal: localePresentMessage,\n\t\t\texpected: localeMissingMessage\n\t\t};\n\t} else if (originalLocalizedDescriptions && expectedLocalizedDescriptions) {\n\t\tyield* reportLocalizationMapDifferences(originalLocalizedDescriptions, expectedLocalizedDescriptions, localeMapName);\n\t}\n}\n\nfunction* reportLocalizationMapDifferences(\n\toriginalMap: LocalizationMap,\n\texpectedMap: LocalizationMap,\n\tmapName: string\n): Generator<CommandDifference> {\n\tconst originalLocalizations = new Map(Object.entries(originalMap));\n\n\tfor (const [key, value] of Object.entries(expectedMap)) {\n\t\tconst possiblyExistingEntry = originalLocalizations.get(key) as string | undefined;\n\t\toriginalLocalizations.delete(key);\n\n\t\tconst wasMissingBefore = typeof possiblyExistingEntry === 'undefined';\n\t\tconst isResetNow = value === null;\n\n\t\t// Was missing before and now is present\n\t\tif (wasMissingBefore && !isResetNow) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: 'no localization present',\n\t\t\t\texpected: value\n\t\t\t};\n\t\t}\n\t\t// Was present before and now is reset\n\t\telse if (!wasMissingBefore && isResetNow) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: possiblyExistingEntry,\n\t\t\t\texpected: 'no localization present'\n\t\t\t};\n\t\t}\n\t\t// Not equal\n\t\t// eslint-disable-next-line no-negated-condition\n\t\telse if (possiblyExistingEntry !== value) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: String(possiblyExistingEntry),\n\t\t\t\texpected: String(value)\n\t\t\t};\n\t\t}\n\t}\n\n\t// Report any remaining localizations\n\tfor (const [key, value] of originalLocalizations) {\n\t\tif (value) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: value,\n\t\t\t\texpected: 'no localization present'\n\t\t\t};\n\t\t}\n\t}\n}\n"]}