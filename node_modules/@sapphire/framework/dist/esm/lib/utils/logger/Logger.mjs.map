{"version":3,"sources":["../../../../../src/lib/utils/logger/Logger.ts"],"names":[],"mappings":";;;AAEO,IAAM,OAAA,GAAN,MAAM,OAAA,CAA0B;AAAA,EAG/B,YAAY,KAAA,EAAiB;AACnC,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AAAA,EACd;AAAA,EAEO,IAAI,KAAA,EAA0B;AACpC,IAAA,OAAO,SAAS,IAAA,CAAK,KAAA;AAAA,EACtB;AAAA,EAEO,SAAS,MAAA,EAAkC;AACjD,IAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,KAAA,EAAO,GAAG,MAAM,CAAA;AAAA,EACrC;AAAA,EAEO,SAAS,MAAA,EAAkC;AACjD,IAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,KAAA,EAAO,GAAG,MAAM,CAAA;AAAA,EACrC;AAAA,EAEO,QAAQ,MAAA,EAAkC;AAChD,IAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,IAAA,EAAM,GAAG,MAAM,CAAA;AAAA,EACpC;AAAA,EAEO,QAAQ,MAAA,EAAkC;AAChD,IAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,IAAA,EAAM,GAAG,MAAM,CAAA;AAAA,EACpC;AAAA,EAEO,SAAS,MAAA,EAAkC;AACjD,IAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,KAAA,EAAO,GAAG,MAAM,CAAA;AAAA,EACrC;AAAA,EAEO,SAAS,MAAA,EAAkC;AACjD,IAAA,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,KAAA,EAAO,GAAG,MAAM,CAAA;AAAA,EACrC;AAAA,EAEO,KAAA,CAAM,UAAoB,MAAA,EAAkC;AAClE,IAAA,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,KAAK,CAAA,EAAG;AACtB,IAAA,MAAM,MAAA,GAAS,OAAA,CAAO,MAAA,CAAO,GAAA,CAAI,KAAK,CAAA;AACtC,IAAA,IAAI,OAAO,MAAA,KAAW,QAAA,EAAU,OAAA,CAAQ,MAAM,CAAA,CAAE,CAAA,CAAA,EAAI,MAAA,CAAO,WAAA,EAAa,CAAA,CAAA,CAAA,EAAK,GAAG,MAAM,CAAA;AAAA,EACvF;AAUD,CAAA;AAjDuC,MAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AAA1B,OAAA,CAyCc,MAAA,uBAAa,GAAA,CAA0B;AAAA,EAChE,CAAC,QAAA,CAAS,KAAA,EAAO,OAAO,CAAA;AAAA,EACxB,CAAC,QAAA,CAAS,KAAA,EAAO,OAAO,CAAA;AAAA,EACxB,CAAC,QAAA,CAAS,IAAA,EAAM,MAAM,CAAA;AAAA,EACtB,CAAC,QAAA,CAAS,IAAA,EAAM,MAAM,CAAA;AAAA,EACtB,CAAC,QAAA,CAAS,KAAA,EAAO,OAAO,CAAA;AAAA,EACxB,CAAC,QAAA,CAAS,KAAA,EAAO,OAAO;AACzB,CAAC,CAAA;AAhDK,IAAM,MAAA,GAAN","file":"Logger.mjs","sourcesContent":["import { LogLevel, type ILogger } from './ILogger';\n\nexport class Logger implements ILogger {\n\tpublic level: LogLevel;\n\n\tpublic constructor(level: LogLevel) {\n\t\tthis.level = level;\n\t}\n\n\tpublic has(level: LogLevel): boolean {\n\t\treturn level >= this.level;\n\t}\n\n\tpublic trace(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Trace, ...values);\n\t}\n\n\tpublic debug(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Debug, ...values);\n\t}\n\n\tpublic info(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Info, ...values);\n\t}\n\n\tpublic warn(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Warn, ...values);\n\t}\n\n\tpublic error(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Error, ...values);\n\t}\n\n\tpublic fatal(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Fatal, ...values);\n\t}\n\n\tpublic write(level: LogLevel, ...values: readonly unknown[]): void {\n\t\tif (!this.has(level)) return;\n\t\tconst method = Logger.levels.get(level);\n\t\tif (typeof method === 'string') console[method](`[${method.toUpperCase()}]`, ...values);\n\t}\n\n\tprotected static readonly levels = new Map<LogLevel, LogMethods>([\n\t\t[LogLevel.Trace, 'trace'],\n\t\t[LogLevel.Debug, 'debug'],\n\t\t[LogLevel.Info, 'info'],\n\t\t[LogLevel.Warn, 'warn'],\n\t\t[LogLevel.Error, 'error'],\n\t\t[LogLevel.Fatal, 'error']\n\t]);\n}\n\nexport type LogMethods = 'trace' | 'debug' | 'info' | 'warn' | 'error';\n"]}