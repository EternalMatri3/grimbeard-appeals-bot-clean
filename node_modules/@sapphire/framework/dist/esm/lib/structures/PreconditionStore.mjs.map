{"version":3,"sources":["../../../../src/lib/structures/PreconditionStore.ts"],"names":[],"mappings":"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","file":"PreconditionStore.mjs","sourcesContent":["import { Store } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport type { ChatInputCommandInteraction, ContextMenuCommandInteraction, Message } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\nimport type { ChatInputCommand, ContextMenuCommand, MessageCommand } from '../types/CommandTypes';\nimport { Precondition, type AsyncPreconditionResult } from './Precondition';\n\nexport class PreconditionStore extends Store<Precondition, 'preconditions'> {\n\tprivate readonly globalPreconditions: Precondition[] = [];\n\n\tpublic constructor() {\n\t\tsuper(Precondition, { name: 'preconditions' });\n\t}\n\n\tpublic async messageRun(message: Message, command: MessageCommand, context: Precondition.Context = {}): AsyncPreconditionResult {\n\t\tfor (const precondition of this.globalPreconditions) {\n\t\t\tconst result = precondition.messageRun\n\t\t\t\t? await precondition.messageRun(message, command, context)\n\t\t\t\t: await precondition.error({\n\t\t\t\t\t\tidentifier: Identifiers.PreconditionMissingMessageHandler,\n\t\t\t\t\t\tmessage: `The precondition \"${precondition.name}\" is missing a \"messageRun\" handler, but it was requested for the \"${command.name}\" command.`\n\t\t\t\t\t});\n\n\t\t\tif (result.isErr()) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn Result.ok();\n\t}\n\n\tpublic async chatInputRun(\n\t\tinteraction: ChatInputCommandInteraction,\n\t\tcommand: ChatInputCommand,\n\t\tcontext: Precondition.Context = {}\n\t): AsyncPreconditionResult {\n\t\tfor (const precondition of this.globalPreconditions) {\n\t\t\tconst result = precondition.chatInputRun\n\t\t\t\t? await precondition.chatInputRun(interaction, command, context)\n\t\t\t\t: await precondition.error({\n\t\t\t\t\t\tidentifier: Identifiers.PreconditionMissingChatInputHandler,\n\t\t\t\t\t\tmessage: `The precondition \"${precondition.name}\" is missing a \"chatInputRun\" handler, but it was requested for the \"${command.name}\" command.`\n\t\t\t\t\t});\n\n\t\t\tif (result.isErr()) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn Result.ok();\n\t}\n\n\tpublic async contextMenuRun(\n\t\tinteraction: ContextMenuCommandInteraction,\n\t\tcommand: ContextMenuCommand,\n\t\tcontext: Precondition.Context = {}\n\t): AsyncPreconditionResult {\n\t\tfor (const precondition of this.globalPreconditions) {\n\t\t\tconst result = precondition.contextMenuRun\n\t\t\t\t? await precondition.contextMenuRun(interaction, command, context)\n\t\t\t\t: await precondition.error({\n\t\t\t\t\t\tidentifier: Identifiers.PreconditionMissingContextMenuHandler,\n\t\t\t\t\t\tmessage: `The precondition \"${precondition.name}\" is missing a \"contextMenuRun\" handler, but it was requested for the \"${command.name}\" command.`\n\t\t\t\t\t});\n\n\t\t\tif (result.isErr()) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn Result.ok();\n\t}\n\n\tpublic override set(key: string, value: Precondition): this {\n\t\tif (value.position !== null) {\n\t\t\tconst index = this.globalPreconditions.findIndex((precondition) => precondition.position! >= value.position!);\n\n\t\t\t// If a precondition with lower priority wasn't found, push to the end of the array\n\t\t\tif (index === -1) this.globalPreconditions.push(value);\n\t\t\telse this.globalPreconditions.splice(index, 0, value);\n\t\t}\n\n\t\treturn super.set(key, value);\n\t}\n\n\tpublic override delete(key: string): boolean {\n\t\tconst index = this.globalPreconditions.findIndex((precondition) => precondition.name === key);\n\n\t\t// If the precondition was found, remove it\n\t\tif (index !== -1) this.globalPreconditions.splice(index, 1);\n\n\t\treturn super.delete(key);\n\t}\n\n\tpublic override clear(): void {\n\t\tthis.globalPreconditions.length = 0;\n\t\treturn super.clear();\n\t}\n}\n"]}