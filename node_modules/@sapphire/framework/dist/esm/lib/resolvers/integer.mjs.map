{"version":3,"sources":["../../../../src/lib/resolvers/integer.ts"],"names":[],"mappings":";;;;AAGO,SAAS,cAAA,CACf,WACA,OAAA,EAC+H;AAC/H,EAAA,MAAM,MAAA,GAAS,OAAO,SAAS,CAAA;AAE/B,EAAA,IAAI,CAAC,MAAA,CAAO,SAAA,CAAU,MAAM,CAAA,EAAG;AAC9B,IAAA,OAAO,MAAA,CAAO,GAAA,CAAI,WAAA,CAAY,oBAAoB,CAAA;AAAA,EACnD;AAEA,EAAA,IAAI,OAAO,OAAA,EAAS,OAAA,KAAY,QAAA,IAAY,MAAA,GAAS,QAAQ,OAAA,EAAS;AACrE,IAAA,OAAO,MAAA,CAAO,GAAA,CAAI,WAAA,CAAY,uBAAuB,CAAA;AAAA,EACtD;AAEA,EAAA,IAAI,OAAO,OAAA,EAAS,OAAA,KAAY,QAAA,IAAY,MAAA,GAAS,QAAQ,OAAA,EAAS;AACrE,IAAA,OAAO,MAAA,CAAO,GAAA,CAAI,WAAA,CAAY,uBAAuB,CAAA;AAAA,EACtD;AAEA,EAAA,OAAO,MAAA,CAAO,GAAG,MAAM,CAAA;AACxB;AAnBgB,MAAA,CAAA,cAAA,EAAA,gBAAA,CAAA","file":"integer.mjs","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveInteger(\n\tparameter: string,\n\toptions?: { minimum?: number; maximum?: number }\n): Result<number, Identifiers.ArgumentIntegerError | Identifiers.ArgumentIntegerTooSmall | Identifiers.ArgumentIntegerTooLarge> {\n\tconst parsed = Number(parameter);\n\n\tif (!Number.isInteger(parsed)) {\n\t\treturn Result.err(Identifiers.ArgumentIntegerError);\n\t}\n\n\tif (typeof options?.minimum === 'number' && parsed < options.minimum) {\n\t\treturn Result.err(Identifiers.ArgumentIntegerTooSmall);\n\t}\n\n\tif (typeof options?.maximum === 'number' && parsed > options.maximum) {\n\t\treturn Result.err(Identifiers.ArgumentIntegerTooLarge);\n\t}\n\n\treturn Result.ok(parsed);\n}\n"]}