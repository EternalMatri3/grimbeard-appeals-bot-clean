{"version":3,"sources":["../../../../src/lib/resolvers/number.ts"],"names":[],"mappings":";;;;AAGO,SAAS,aAAA,CACf,WACA,OAAA,EAC4H;AAC5H,EAAA,MAAM,MAAA,GAAS,OAAO,SAAS,CAAA;AAC/B,EAAA,IAAI,MAAA,CAAO,KAAA,CAAM,MAAM,CAAA,EAAG;AACzB,IAAA,OAAO,MAAA,CAAO,GAAA,CAAI,WAAA,CAAY,mBAAmB,CAAA;AAAA,EAClD;AAEA,EAAA,IAAI,OAAO,OAAA,EAAS,OAAA,KAAY,QAAA,IAAY,MAAA,GAAS,QAAQ,OAAA,EAAS;AACrE,IAAA,OAAO,MAAA,CAAO,GAAA,CAAI,WAAA,CAAY,sBAAsB,CAAA;AAAA,EACrD;AAEA,EAAA,IAAI,OAAO,OAAA,EAAS,OAAA,KAAY,QAAA,IAAY,MAAA,GAAS,QAAQ,OAAA,EAAS;AACrE,IAAA,OAAO,MAAA,CAAO,GAAA,CAAI,WAAA,CAAY,sBAAsB,CAAA;AAAA,EACrD;AAEA,EAAA,OAAO,MAAA,CAAO,GAAG,MAAM,CAAA;AACxB;AAlBgB,MAAA,CAAA,aAAA,EAAA,eAAA,CAAA","file":"number.mjs","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveNumber(\n\tparameter: string,\n\toptions?: { minimum?: number; maximum?: number }\n): Result<number, Identifiers.ArgumentNumberError | Identifiers.ArgumentNumberTooSmall | Identifiers.ArgumentNumberTooLarge> {\n\tconst parsed = Number(parameter);\n\tif (Number.isNaN(parsed)) {\n\t\treturn Result.err(Identifiers.ArgumentNumberError);\n\t}\n\n\tif (typeof options?.minimum === 'number' && parsed < options.minimum) {\n\t\treturn Result.err(Identifiers.ArgumentNumberTooSmall);\n\t}\n\n\tif (typeof options?.maximum === 'number' && parsed > options.maximum) {\n\t\treturn Result.err(Identifiers.ArgumentNumberTooLarge);\n\t}\n\n\treturn Result.ok(parsed);\n}\n"]}