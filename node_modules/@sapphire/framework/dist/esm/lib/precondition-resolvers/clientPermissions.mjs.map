{"version":3,"sources":["../../../../src/lib/precondition-resolvers/clientPermissions.ts"],"names":[],"mappings":";;;;AAUO,SAAS,sDAAA,CACf,2BACA,0BAAA,EACC;AACD,EAAA,MAAM,WAAA,GAAc,IAAI,mBAAA,CAAoB,yBAAyB,CAAA;AACrE,EAAA,IAAI,WAAA,CAAY,aAAa,EAAA,EAAI;AAChC,IAAA,0BAAA,CAA2B,MAAA,CAAO,EAAE,IAAA,EAAM,oBAAA,CAAqB,mBAAmB,OAAA,EAAS,EAAE,WAAA,EAAY,EAAG,CAAA;AAAA,EAC7G;AACD;AARgB,MAAA,CAAA,sDAAA,EAAA,wDAAA,CAAA","file":"clientPermissions.mjs","sourcesContent":["import { PermissionsBitField, type PermissionResolvable } from 'discord.js';\nimport { CommandPreConditions } from '../types/Enums';\nimport type { PreconditionContainerArray } from '../utils/preconditions/PreconditionContainerArray';\n\n/**\n * Appends the `ClientPermissions` precondition when {@link Command.Options.requiredClientPermissions} resolves to a\n * non-zero bitfield.\n * @param requiredClientPermissions The required client permissions.\n * @param preconditionContainerArray The precondition container array to append the precondition to.\n */\nexport function parseConstructorPreConditionsRequiredClientPermissions(\n\trequiredClientPermissions: PermissionResolvable | undefined,\n\tpreconditionContainerArray: PreconditionContainerArray\n) {\n\tconst permissions = new PermissionsBitField(requiredClientPermissions);\n\tif (permissions.bitfield !== 0n) {\n\t\tpreconditionContainerArray.append({ name: CommandPreConditions.ClientPermissions, context: { permissions } });\n\t}\n}\n"]}