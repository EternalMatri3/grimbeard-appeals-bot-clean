{"version":3,"sources":["../../../../src/lib/precondition-resolvers/runIn.ts"],"names":[],"mappings":";;;;;AAcO,SAAS,kCAAA,CACf,KAAA,EACA,sCAAA,EACA,0BAAA,EACC;AAED,EAAA,IAAI,SAAA,CAAU,KAAK,CAAA,EAAG;AAEtB,EAAA,IAAI,OAAA,CAAQ,0BAAA,CAA2B,KAAK,CAAA,EAAG;AAC9C,IAAA,MAAM,eAAA,GAAkB,sCAAA,CAAuC,KAAA,CAAM,UAAU,CAAA;AAC/E,IAAA,MAAM,iBAAA,GAAoB,sCAAA,CAAuC,KAAA,CAAM,YAAY,CAAA;AACnF,IAAA,MAAM,mBAAA,GAAsB,sCAAA,CAAuC,KAAA,CAAM,cAAc,CAAA;AAEvF,IAAA,IAAI,eAAA,KAAoB,IAAA,IAAQ,iBAAA,KAAsB,IAAA,IAAQ,wBAAwB,IAAA,EAAM;AAC3F,MAAA,0BAAA,CAA2B,MAAA,CAAO;AAAA,QACjC,MAAM,oBAAA,CAAqB,KAAA;AAAA,QAC3B,OAAA,EAAS;AAAA,UACR,KAAA,EAAO;AAAA,YACN,UAAA,EAAY,mBAAmB,EAAC;AAAA,YAChC,YAAA,EAAc,qBAAqB,EAAC;AAAA,YACpC,cAAA,EAAgB,uBAAuB;AAAC;AACzC;AACD,OACA,CAAA;AAAA,IACF;AAAA,EACD,CAAA,MAAO;AACN,IAAA,MAAM,KAAA,GAAQ,uCAAuC,KAAK,CAAA;AAC1D,IAAA,IAAI,UAAU,IAAA,EAAM;AACnB,MAAA,0BAAA,CAA2B,MAAA,CAAO,EAAE,IAAA,EAAM,oBAAA,CAAqB,OAAO,OAAA,EAAS,EAAE,KAAA,EAAM,EAAG,CAAA;AAAA,IAC3F;AAAA,EACD;AACD;AA/BgB,MAAA,CAAA,kCAAA,EAAA,oCAAA,CAAA","file":"runIn.mjs","sourcesContent":["import { isNullish } from '@sapphire/utilities';\nimport type { ChannelType } from 'discord.js';\nimport { Command } from '../structures/Command';\nimport type { CommandRunInUnion, CommandSpecificRunIn } from '../types/CommandTypes';\nimport { CommandPreConditions } from '../types/Enums';\nimport type { PreconditionContainerArray } from '../utils/preconditions/PreconditionContainerArray';\n\n/**\n * Appends the `RunIn` precondition based on the values passed, defaulting to `null`, which doesn't add a\n * precondition.\n * @param runIn The command's `runIn` option field from the constructor.\n * @param resolveConstructorPreConditionsRunType The function to resolve the run type from the constructor.\n * @param preconditionContainerArray The precondition container array to append the precondition to.\n */\nexport function parseConstructorPreConditionsRunIn(\n\trunIn: CommandRunInUnion | CommandSpecificRunIn,\n\tresolveConstructorPreConditionsRunType: (types: CommandRunInUnion) => readonly ChannelType[] | null,\n\tpreconditionContainerArray: PreconditionContainerArray\n) {\n\t// Early return if there's no runIn option:\n\tif (isNullish(runIn)) return;\n\n\tif (Command.runInTypeIsSpecificsObject(runIn)) {\n\t\tconst messageRunTypes = resolveConstructorPreConditionsRunType(runIn.messageRun);\n\t\tconst chatInputRunTypes = resolveConstructorPreConditionsRunType(runIn.chatInputRun);\n\t\tconst contextMenuRunTypes = resolveConstructorPreConditionsRunType(runIn.contextMenuRun);\n\n\t\tif (messageRunTypes !== null || chatInputRunTypes !== null || contextMenuRunTypes !== null) {\n\t\t\tpreconditionContainerArray.append({\n\t\t\t\tname: CommandPreConditions.RunIn,\n\t\t\t\tcontext: {\n\t\t\t\t\ttypes: {\n\t\t\t\t\t\tmessageRun: messageRunTypes ?? [],\n\t\t\t\t\t\tchatInputRun: chatInputRunTypes ?? [],\n\t\t\t\t\t\tcontextMenuRun: contextMenuRunTypes ?? []\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} else {\n\t\tconst types = resolveConstructorPreConditionsRunType(runIn);\n\t\tif (types !== null) {\n\t\t\tpreconditionContainerArray.append({ name: CommandPreConditions.RunIn, context: { types } });\n\t\t}\n\t}\n}\n"]}