{"version":3,"sources":["../../../../src/lib/precondition-resolvers/userPermissions.ts"],"names":[],"mappings":";;;;AAUO,SAAS,oDAAA,CACf,yBACA,0BAAA,EACC;AACD,EAAA,MAAM,WAAA,GAAc,IAAI,mBAAA,CAAoB,uBAAuB,CAAA;AACnE,EAAA,IAAI,WAAA,CAAY,aAAa,EAAA,EAAI;AAChC,IAAA,0BAAA,CAA2B,MAAA,CAAO,EAAE,IAAA,EAAM,oBAAA,CAAqB,iBAAiB,OAAA,EAAS,EAAE,WAAA,EAAY,EAAG,CAAA;AAAA,EAC3G;AACD;AARgB,MAAA,CAAA,oDAAA,EAAA,sDAAA,CAAA","file":"userPermissions.mjs","sourcesContent":["import { PermissionsBitField, type PermissionResolvable } from 'discord.js';\nimport { CommandPreConditions } from '../types/Enums';\nimport type { PreconditionContainerArray } from '../utils/preconditions/PreconditionContainerArray';\n\n/**\n * Appends the `UserPermissions` precondition when {@link Command.Options.requiredUserPermissions} resolves to a\n * non-zero bitfield.\n * @param requiredUserPermissions The required user permissions.\n * @param preconditionContainerArray The precondition container array to append the precondition to.\n */\nexport function parseConstructorPreConditionsRequiredUserPermissions(\n\trequiredUserPermissions: PermissionResolvable | undefined,\n\tpreconditionContainerArray: PreconditionContainerArray\n) {\n\tconst permissions = new PermissionsBitField(requiredUserPermissions);\n\tif (permissions.bitfield !== 0n) {\n\t\tpreconditionContainerArray.append({ name: CommandPreConditions.UserPermissions, context: { permissions } });\n\t}\n}\n"]}