{"version":3,"sources":["../../../../../src/listeners/application-commands/chat-input/CorePreChatInputCommandRun.ts"],"names":[],"mappings":";;;;;AAIO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAA+C;AAAA,EACzE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,MAAA,CAAO,wBAAwB,CAAA;AAAA,EACxD;AAAA,EAEA,MAAa,IAAI,OAAA,EAAwC;AACxD,IAAA,MAAM,EAAE,OAAA,EAAS,WAAA,EAAY,GAAI,OAAA;AAGjC,IAAA,MAAM,YAAA,GAAe,MAAM,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,GAAA,CAAI,eAAe,CAAA,CAAE,YAAA,CAAa,WAAA,EAAa,OAAA,EAAS,OAAc,CAAA;AACvH,IAAA,IAAI,YAAA,CAAa,OAAM,EAAG;AACzB,MAAA,IAAA,CAAK,SAAA,CAAU,OAAO,IAAA,CAAK,MAAA,CAAO,wBAAwB,YAAA,CAAa,SAAA,IAAa,OAAO,CAAA;AAC3F,MAAA;AAAA,IACD;AAGA,IAAA,MAAM,cAAc,MAAM,OAAA,CAAQ,cAAc,YAAA,CAAa,WAAA,EAAa,SAAS,OAAc,CAAA;AACjG,IAAA,IAAI,WAAA,CAAY,OAAM,EAAG;AACxB,MAAA,IAAA,CAAK,SAAA,CAAU,OAAO,IAAA,CAAK,MAAA,CAAO,wBAAwB,WAAA,CAAY,SAAA,IAAa,OAAO,CAAA;AAC1F,MAAA;AAAA,IACD;AAEA,IAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,0BAA0B,OAAO,CAAA;AAAA,EACpE;AACD,CAAA;AAxBiF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA1E,IAAM,YAAA,GAAN;AA0BP,KAAK,SAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,4BAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CorePreChatInputCommandRun.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Listener } from '../../../lib/structures/Listener';\nimport { Events, type PreChatInputCommandRunPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreChatInputCommandRun> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreChatInputCommandRun });\n\t}\n\n\tpublic async run(payload: PreChatInputCommandRunPayload) {\n\t\tconst { command, interaction } = payload;\n\n\t\t// Run global preconditions:\n\t\tconst globalResult = await this.container.stores.get('preconditions').chatInputRun(interaction, command, payload as any);\n\t\tif (globalResult.isErr()) {\n\t\t\tthis.container.client.emit(Events.ChatInputCommandDenied, globalResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\t// Run command-specific preconditions:\n\t\tconst localResult = await command.preconditions.chatInputRun(interaction, command, payload as any);\n\t\tif (localResult.isErr()) {\n\t\t\tthis.container.client.emit(Events.ChatInputCommandDenied, localResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.container.client.emit(Events.ChatInputCommandAccepted, payload);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePreChatInputCommandRun',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}