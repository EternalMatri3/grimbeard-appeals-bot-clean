{"version":3,"sources":["../../../../../src/listeners/application-commands/context-menu/CoreContextMenuCommandAccepted.ts"],"names":["result"],"mappings":";;;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAAmD;AAAA,EAC7E,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,MAAA,CAAO,4BAA4B,CAAA;AAAA,EAC5D;AAAA,EAEA,MAAa,IAAI,OAAA,EAA4C;AAC5D,IAAA,MAAM,EAAE,OAAA,EAAS,OAAA,EAAS,WAAA,EAAY,GAAI,OAAA;AAE1C,IAAA,MAAM,MAAA,GAAS,MAAM,MAAA,CAAO,SAAA,CAAU,YAAY;AACjD,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,qBAAA,EAAuB,aAAa,OAAA,EAAS,EAAE,GAAG,OAAA,EAAS,CAAA;AAE7F,MAAA,MAAM,SAAA,GAAY,IAAI,SAAA,EAAU;AAChC,MAAA,MAAMA,OAAAA,GAAS,MAAM,OAAA,CAAQ,cAAA,CAAe,aAAa,OAAO,CAAA;AAChE,MAAA,MAAM,EAAE,QAAA,EAAS,GAAI,SAAA,CAAU,IAAA,EAAK;AAEpC,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,yBAAA,EAA2B,EAAE,GAAG,OAAA,EAAS,MAAA,EAAAA,OAAAA,EAAQ,QAAA,EAAU,CAAA;AAE7F,MAAA,OAAO,QAAA;AAAA,IACR,CAAC,CAAA;AAED,IAAA,MAAA,CAAO,WAAW,CAAC,KAAA,KAAU,IAAA,CAAK,SAAA,CAAU,OAAO,IAAA,CAAK,MAAA,CAAO,uBAAA,EAAyB,KAAA,EAAO,EAAE,GAAG,OAAA,EAAS,QAAA,EAAU,EAAA,EAAI,CAAC,CAAA;AAE5H,IAAA,IAAA,CAAK,UAAU,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,wBAAA,EAA0B,aAAa,OAAA,EAAS;AAAA,MACjF,GAAG,OAAA;AAAA,MACH,OAAA,EAAS,OAAO,IAAA,EAAK;AAAA,MACrB,QAAA,EAAU,MAAA,CAAO,QAAA,CAAS,EAAE;AAAA,KAC5B,CAAA;AAAA,EACF;AACD,CAAA;AA5BqF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA9E,IAAM,YAAA,GAAN;AA8BP,KAAK,SAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,gCAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CoreContextMenuCommandAccepted.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport { Stopwatch } from '@sapphire/stopwatch';\nimport { Listener } from '../../../lib/structures/Listener';\nimport { Events, type ContextMenuCommandAcceptedPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ContextMenuCommandAccepted> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ContextMenuCommandAccepted });\n\t}\n\n\tpublic async run(payload: ContextMenuCommandAcceptedPayload) {\n\t\tconst { command, context, interaction } = payload;\n\n\t\tconst result = await Result.fromAsync(async () => {\n\t\t\tthis.container.client.emit(Events.ContextMenuCommandRun, interaction, command, { ...payload });\n\n\t\t\tconst stopwatch = new Stopwatch();\n\t\t\tconst result = await command.contextMenuRun(interaction, context);\n\t\t\tconst { duration } = stopwatch.stop();\n\n\t\t\tthis.container.client.emit(Events.ContextMenuCommandSuccess, { ...payload, result, duration });\n\n\t\t\treturn duration;\n\t\t});\n\n\t\tresult.inspectErr((error) => this.container.client.emit(Events.ContextMenuCommandError, error, { ...payload, duration: -1 }));\n\n\t\tthis.container.client.emit(Events.ContextMenuCommandFinish, interaction, command, {\n\t\t\t...payload,\n\t\t\tsuccess: result.isOk(),\n\t\t\tduration: result.unwrapOr(-1)\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CoreContextMenuCommandAccepted',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}