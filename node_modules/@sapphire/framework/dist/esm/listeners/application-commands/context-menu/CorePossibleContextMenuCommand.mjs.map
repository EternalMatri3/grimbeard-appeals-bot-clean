{"version":3,"sources":["../../../../../src/listeners/application-commands/context-menu/CorePossibleContextMenuCommand.ts"],"names":[],"mappings":";;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAAmD;AAAA,EAC7E,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,MAAA,CAAO,4BAA4B,CAAA;AAAA,EAC5D;AAAA,EAEO,IAAI,WAAA,EAA4C;AACtD,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAA,EAAO,GAAI,IAAA,CAAK,SAAA;AAChC,IAAA,MAAM,YAAA,GAAe,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA;AAE1C,IAAA,MAAM,OAAA,GAAU,aAAa,GAAA,CAAI,WAAA,CAAY,SAAS,CAAA,IAAK,YAAA,CAAa,GAAA,CAAI,WAAA,CAAY,WAAW,CAAA;AACnG,IAAA,IAAI,CAAC,OAAA,EAAS;AACb,MAAA,MAAA,CAAO,IAAA,CAAK,OAAO,yBAAA,EAA2B;AAAA,QAC7C,WAAA;AAAA,QACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAA,EAAW,WAAA,EAAa,YAAY,WAAA;AAAY,OAClF,CAAA;AACD,MAAA;AAAA,IACD;AAEA,IAAA,IAAI,CAAC,QAAQ,cAAA,EAAgB;AAC5B,MAAA,MAAA,CAAO,IAAA,CAAK,OAAO,2CAAA,EAA6C;AAAA,QAC/D,OAAA;AAAA,QACA,WAAA;AAAA,QACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAA,EAAW,WAAA,EAAa,YAAY,WAAA;AAAY,OAClF,CAAA;AACD,MAAA;AAAA,IACD;AAEA,IAAA,MAAA,CAAO,IAAA,CAAK,OAAO,wBAAA,EAA0B;AAAA,MAC5C,OAAA;AAAA,MACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAA,EAAW,WAAA,EAAa,YAAY,WAAA,EAAY;AAAA,MAClF;AAAA,KACA,CAAA;AAAA,EACF;AACD,CAAA;AAjCqF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA9E,IAAM,YAAA,GAAN;AAmCP,KAAK,SAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,gCAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CorePossibleContextMenuCommand.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ContextMenuCommandInteraction } from 'discord.js';\nimport { Listener } from '../../../lib/structures/Listener';\nimport type { ContextMenuCommand } from '../../../lib/types/CommandTypes';\nimport { Events } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PossibleContextMenuCommand> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PossibleContextMenuCommand });\n\t}\n\n\tpublic run(interaction: ContextMenuCommandInteraction) {\n\t\tconst { client, stores } = this.container;\n\t\tconst commandStore = stores.get('commands');\n\n\t\tconst command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);\n\t\tif (!command) {\n\t\t\tclient.emit(Events.UnknownContextMenuCommand, {\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (!command.contextMenuRun) {\n\t\t\tclient.emit(Events.CommandDoesNotHaveContextMenuCommandHandler, {\n\t\t\t\tcommand,\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tclient.emit(Events.PreContextMenuCommandRun, {\n\t\t\tcommand: command as ContextMenuCommand,\n\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\tinteraction\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePossibleContextMenuCommand',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}