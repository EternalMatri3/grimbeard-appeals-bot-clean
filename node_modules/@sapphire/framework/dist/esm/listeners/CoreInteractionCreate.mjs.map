{"version":3,"sources":["../../../src/listeners/CoreInteractionCreate.ts"],"names":[],"mappings":";;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAA0C;AAAA,EACpE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,MAAA,CAAO,mBAAmB,CAAA;AAAA,EACnD;AAAA,EAEA,MAAa,IAAI,WAAA,EAA0B;AAC1C,IAAA,IAAI,WAAA,CAAY,oBAAmB,EAAG;AACrC,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,0BAA0B,WAAW,CAAA;AAAA,IACxE,CAAA,MAAA,IAAW,WAAA,CAAY,oBAAA,EAAqB,EAAG;AAC9C,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,4BAA4B,WAAW,CAAA;AAAA,IAC1E,CAAA,MAAA,IAAW,WAAA,CAAY,cAAA,EAAe,EAAG;AACxC,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,iCAAiC,WAAW,CAAA;AAAA,IAC/E,WAAW,WAAA,CAAY,kBAAA,EAAmB,IAAK,WAAA,CAAY,eAAc,EAAG;AAC3E,MAAA,MAAM,KAAK,SAAA,CAAU,MAAA,CAAO,IAAI,sBAAsB,CAAA,CAAE,IAAI,WAAW,CAAA;AAAA,IACxE,CAAA,MAAO;AACN,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAK,CAAA,UAAA,EAAa,IAAA,CAAK,QAAA,CAAS,IAAI,CAAA,8BAAA,EAAkC,WAAA,CAAoB,WAAA,CAAY,IAAI,CAAA,CAAE,CAAA;AAAA,IACnI;AAAA,EACD;AACD,CAAA;AAlB4E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAArE,IAAM,YAAA,GAAN;AAoBP,KAAK,SAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,uBAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CoreInteractionCreate.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { Interaction } from 'discord.js';\nimport { Listener } from '../lib/structures/Listener';\nimport { Events } from '../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.InteractionCreate> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.InteractionCreate });\n\t}\n\n\tpublic async run(interaction: Interaction) {\n\t\tif (interaction.isChatInputCommand()) {\n\t\t\tthis.container.client.emit(Events.PossibleChatInputCommand, interaction);\n\t\t} else if (interaction.isContextMenuCommand()) {\n\t\t\tthis.container.client.emit(Events.PossibleContextMenuCommand, interaction);\n\t\t} else if (interaction.isAutocomplete()) {\n\t\t\tthis.container.client.emit(Events.PossibleAutocompleteInteraction, interaction);\n\t\t} else if (interaction.isMessageComponent() || interaction.isModalSubmit()) {\n\t\t\tawait this.container.stores.get('interaction-handlers').run(interaction);\n\t\t} else {\n\t\t\tthis.container.logger.warn(`[Sapphire ${this.location.name}] Unhandled interaction type: ${(interaction as any).constructor.name}`);\n\t\t}\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CoreInteractionCreate',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}