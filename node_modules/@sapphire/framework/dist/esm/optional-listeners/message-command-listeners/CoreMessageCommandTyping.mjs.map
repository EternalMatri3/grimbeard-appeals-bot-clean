{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CoreMessageCommandTyping.ts"],"names":[],"mappings":";;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAA0C;AAAA,EACpE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,MAAA,CAAO,mBAAmB,CAAA;AAClD,IAAA,IAAA,CAAK,OAAA,GAAU,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,QAAQ,MAAA,IAAU,KAAA;AAAA,EACxD;AAAA,EAEA,MAAa,GAAA,CAAI,OAAA,EAAkB,OAAA,EAAyB,OAAA,EAAmC;AAC9F,IAAA,IAAI,CAAC,OAAA,CAAQ,MAAA,IAAU,cAAA,CAAe,OAAA,CAAQ,OAAO,CAAA,EAAG;AACvD,MAAA;AAAA,IACD;AAEA,IAAA,IAAI,OAAA,CAAQ,OAAA,CAAQ,IAAA,KAAS,WAAA,CAAY,OAAA,EAAS;AACjD,MAAA;AAAA,IACD;AAEA,IAAA,IAAI;AACH,MAAA,MAAM,OAAA,CAAQ,QAAQ,UAAA,EAAW;AAAA,IAClC,SAAS,KAAA,EAAO;AACf,MAAA,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,yBAAA,EAA2B,KAAA,EAAgB,EAAE,GAAG,OAAA,EAAS,OAAA,EAAS,OAAA,EAAS,CAAA;AAAA,IACvG;AAAA,EACD;AACD,CAAA;AArB4E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAArE,IAAM,YAAA,GAAN","file":"CoreMessageCommandTyping.mjs","sourcesContent":["import { isStageChannel } from '@sapphire/discord.js-utilities';\nimport { ChannelType, type Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport type { MessageCommand } from '../../lib/types/CommandTypes';\nimport { Events, type MessageCommandRunPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.MessageCommandRun> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.MessageCommandRun });\n\t\tthis.enabled = this.container.client.options.typing ?? false;\n\t}\n\n\tpublic async run(message: Message, command: MessageCommand, payload: MessageCommandRunPayload) {\n\t\tif (!command.typing || isStageChannel(message.channel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (message.channel.type === ChannelType.GroupDM) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait message.channel.sendTyping();\n\t\t} catch (error) {\n\t\t\tmessage.client.emit(Events.MessageCommandTypingError, error as Error, { ...payload, command, message });\n\t\t}\n\t}\n}\n"]}