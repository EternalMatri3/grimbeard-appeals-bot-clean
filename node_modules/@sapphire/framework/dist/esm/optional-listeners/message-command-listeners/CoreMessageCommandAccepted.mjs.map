{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CoreMessageCommandAccepted.ts"],"names":["result"],"mappings":";;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAA+C;AAAA,EACzE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,MAAA,CAAO,wBAAwB,CAAA;AAAA,EACxD;AAAA,EAEA,MAAa,IAAI,OAAA,EAAwC;AACxD,IAAA,MAAM,EAAE,OAAA,EAAS,OAAA,EAAS,UAAA,EAAY,SAAQ,GAAI,OAAA;AAClD,IAAA,MAAM,OAAO,MAAM,OAAA,CAAQ,eAAA,CAAgB,OAAA,EAAS,YAAY,OAAO,CAAA;AAEvE,IAAA,MAAM,MAAA,GAAS,MAAM,MAAA,CAAO,SAAA,CAAU,YAAY;AACjD,MAAA,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,iBAAA,EAAmB,OAAA,EAAS,SAAS,EAAE,GAAG,OAAA,EAAS,IAAA,EAAM,CAAA;AAEpF,MAAA,MAAM,SAAA,GAAY,IAAI,SAAA,EAAU;AAChC,MAAA,MAAMA,UAAS,MAAM,OAAA,CAAQ,UAAA,CAAW,OAAA,EAAS,MAAM,OAAO,CAAA;AAC9D,MAAA,MAAM,EAAE,QAAA,EAAS,GAAI,SAAA,CAAU,IAAA,EAAK;AAEpC,MAAA,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,qBAAA,EAAuB,EAAE,GAAG,OAAA,EAAS,IAAA,EAAM,MAAA,EAAAA,OAAAA,EAAQ,QAAA,EAAU,CAAA;AAExF,MAAA,OAAO,QAAA;AAAA,IACR,CAAC,CAAA;AAED,IAAA,MAAA,CAAO,WAAW,CAAC,KAAA,KAAU,OAAA,CAAQ,MAAA,CAAO,KAAK,MAAA,CAAO,mBAAA,EAAqB,KAAA,EAAO,EAAE,GAAG,OAAA,EAAS,IAAA,EAAM,QAAA,EAAU,EAAA,EAAI,CAAC,CAAA;AAEvH,IAAA,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,oBAAA,EAAsB,SAAS,OAAA,EAAS;AAAA,MAClE,GAAG,OAAA;AAAA,MACH,IAAA;AAAA,MACA,OAAA,EAAS,OAAO,IAAA,EAAK;AAAA,MACrB,QAAA,EAAU,MAAA,CAAO,QAAA,CAAS,EAAE;AAAA,KAC5B,CAAA;AAAA,EACF;AACD,CAAA;AA9BiF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA1E,IAAM,YAAA,GAAN","file":"CoreMessageCommandAccepted.mjs","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Stopwatch } from '@sapphire/stopwatch';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events, type MessageCommandAcceptedPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.MessageCommandAccepted> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.MessageCommandAccepted });\n\t}\n\n\tpublic async run(payload: MessageCommandAcceptedPayload) {\n\t\tconst { message, command, parameters, context } = payload;\n\t\tconst args = await command.messagePreParse(message, parameters, context);\n\n\t\tconst result = await Result.fromAsync(async () => {\n\t\t\tmessage.client.emit(Events.MessageCommandRun, message, command, { ...payload, args });\n\n\t\t\tconst stopwatch = new Stopwatch();\n\t\t\tconst result = await command.messageRun(message, args, context);\n\t\t\tconst { duration } = stopwatch.stop();\n\n\t\t\tmessage.client.emit(Events.MessageCommandSuccess, { ...payload, args, result, duration });\n\n\t\t\treturn duration;\n\t\t});\n\n\t\tresult.inspectErr((error) => message.client.emit(Events.MessageCommandError, error, { ...payload, args, duration: -1 }));\n\n\t\tmessage.client.emit(Events.MessageCommandFinish, message, command, {\n\t\t\t...payload,\n\t\t\targs,\n\t\t\tsuccess: result.isOk(),\n\t\t\tduration: result.unwrapOr(-1)\n\t\t});\n\t}\n}\n"]}