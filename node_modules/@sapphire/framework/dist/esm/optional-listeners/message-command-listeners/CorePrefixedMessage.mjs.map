{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePrefixedMessage.ts"],"names":[],"mappings":";;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAAwC;AAAA,EAClE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,MAAA,CAAO,iBAAiB,CAAA;AAAA,EACjD;AAAA,EAEO,GAAA,CAAI,SAAkB,MAAA,EAAyB;AACrD,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAA,EAAO,GAAI,IAAA,CAAK,SAAA;AAEhC,IAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,gBAAA,CAAiB,OAAA,CAAQ,SAAS,MAAM,CAAA;AACnE,IAAA,MAAM,aAAa,OAAA,CAAQ,OAAA,CAAQ,MAAM,aAAA,CAAc,MAAM,EAAE,IAAA,EAAK;AAIpE,IAAA,MAAM,UAAA,GAAa,UAAA,CAAW,OAAA,CAAQ,GAAG,CAAA;AACzC,IAAA,MAAM,cAAc,UAAA,KAAe,EAAA,GAAK,aAAa,UAAA,CAAW,KAAA,CAAM,GAAG,UAAU,CAAA;AACnF,IAAA,IAAI,WAAA,CAAY,WAAW,CAAA,EAAG;AAC7B,MAAA,MAAA,CAAO,KAAK,MAAA,CAAO,yBAAA,EAA2B,EAAE,OAAA,EAAS,MAAA,EAAQ,eAAe,CAAA;AAChF,MAAA;AAAA,IACD;AAGA,IAAA,MAAM,OAAA,GAAU,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,CAAE,GAAA,CAAI,MAAA,CAAO,OAAA,CAAQ,uBAAA,GAA0B,WAAA,CAAY,WAAA,EAAY,GAAI,WAAW,CAAA;AAC3H,IAAA,IAAI,CAAC,OAAA,EAAS;AACb,MAAA,MAAA,CAAO,IAAA,CAAK,OAAO,qBAAA,EAAuB,EAAE,SAAS,MAAA,EAAQ,WAAA,EAAa,eAAe,CAAA;AACzF,MAAA;AAAA,IACD;AAGA,IAAA,IAAI,CAAC,QAAQ,UAAA,EAAY;AACxB,MAAA,MAAA,CAAO,IAAA,CAAK,OAAO,uCAAA,EAAyC,EAAE,SAAS,MAAA,EAAQ,aAAA,EAAe,SAAS,CAAA;AACvG,MAAA;AAAA,IACD;AAGA,IAAA,MAAM,UAAA,GAAa,eAAe,EAAA,GAAK,EAAA,GAAK,WAAW,SAAA,CAAU,UAAA,GAAa,CAAC,CAAA,CAAE,IAAA,EAAK;AACtF,IAAA,MAAA,CAAO,IAAA,CAAK,OAAO,oBAAA,EAAsB;AAAA,MACxC,OAAA;AAAA,MACA,OAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAA,EAAS,EAAE,WAAA,EAAa,aAAA,EAAe,MAAA;AAAO,KAC9C,CAAA;AAAA,EACF;AAAA,EAEQ,gBAAA,CAAiB,SAAiB,MAAA,EAAiC;AAC1E,IAAA,OAAO,OAAO,WAAW,QAAA,GAAW,MAAA,GAAS,OAAO,IAAA,CAAK,OAAO,EAAG,CAAC,CAAA;AAAA,EACrE;AACD,CAAA;AA9C0E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAnE,IAAM,YAAA,GAAN","file":"CorePrefixedMessage.mjs","sourcesContent":["import type { Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport type { MessageCommand } from '../../lib/types/CommandTypes';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PrefixedMessage> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PrefixedMessage });\n\t}\n\n\tpublic run(message: Message, prefix: string | RegExp) {\n\t\tconst { client, stores } = this.container;\n\t\t// Retrieve the command name and validate:\n\t\tconst commandPrefix = this.getCommandPrefix(message.content, prefix);\n\t\tconst prefixLess = message.content.slice(commandPrefix.length).trim();\n\n\t\t// The character that separates the command name from the arguments, this will return -1 when '[p]command' is\n\t\t// passed, and a non -1 value when '[p]command arg' is passed instead.\n\t\tconst spaceIndex = prefixLess.indexOf(' ');\n\t\tconst commandName = spaceIndex === -1 ? prefixLess : prefixLess.slice(0, spaceIndex);\n\t\tif (commandName.length === 0) {\n\t\t\tclient.emit(Events.UnknownMessageCommandName, { message, prefix, commandPrefix });\n\t\t\treturn;\n\t\t}\n\n\t\t// Retrieve the command and validate:\n\t\tconst command = stores.get('commands').get(client.options.caseInsensitiveCommands ? commandName.toLowerCase() : commandName);\n\t\tif (!command) {\n\t\t\tclient.emit(Events.UnknownMessageCommand, { message, prefix, commandName, commandPrefix });\n\t\t\treturn;\n\t\t}\n\n\t\t// If the command exists but is missing a message handler, emit a different event (maybe an application command variant exists)\n\t\tif (!command.messageRun) {\n\t\t\tclient.emit(Events.CommandDoesNotHaveMessageCommandHandler, { message, prefix, commandPrefix, command });\n\t\t\treturn;\n\t\t}\n\n\t\t// Run the last stage before running the command:\n\t\tconst parameters = spaceIndex === -1 ? '' : prefixLess.substring(spaceIndex + 1).trim();\n\t\tclient.emit(Events.PreMessageCommandRun, {\n\t\t\tmessage,\n\t\t\tcommand: command as MessageCommand,\n\t\t\tparameters,\n\t\t\tcontext: { commandName, commandPrefix, prefix }\n\t\t});\n\t}\n\n\tprivate getCommandPrefix(content: string, prefix: string | RegExp): string {\n\t\treturn typeof prefix === 'string' ? prefix : prefix.exec(content)![0];\n\t}\n}\n"]}