{"version":3,"sources":["../../../src/arguments/CoreDate.ts"],"names":[],"mappings":";;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAAe;AAAA,EAOzC,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,IAAA,EAAM,MAAA,EAAQ,CAAA;AAPhC,IAAA,IAAA,CAAiB,QAAA,GAAW;AAAA,MAC3B,CAAC,WAAA,CAAY,oBAAoB,GAAG,CAAC,EAAE,OAAA,EAAQ,KAAwB,CAAA,6BAAA,EAAgC,IAAI,IAAA,CAAK,OAAQ,CAAA,CAAE,aAAa,CAAA,CAAA,CAAA;AAAA,MACvI,CAAC,WAAA,CAAY,kBAAkB,GAAG,CAAC,EAAE,OAAA,EAAQ,KAAwB,CAAA,8BAAA,EAAiC,IAAI,IAAA,CAAK,OAAQ,CAAA,CAAE,aAAa,CAAA,CAAA,CAAA;AAAA,MACtI,CAAC,WAAA,CAAY,iBAAiB,GAAG,MAAM;AAAA,KACxC;AAAA,EAIA;AAAA,EAEO,GAAA,CAAI,WAAmB,OAAA,EAAkD;AAC/E,IAAA,MAAM,QAAA,GAAW,WAAA,CAAY,SAAA,EAAW,EAAE,OAAA,EAAS,QAAQ,OAAA,EAAS,OAAA,EAAS,OAAA,CAAQ,OAAA,EAAS,CAAA;AAC9F,IAAA,OAAO,QAAA,CAAS,UAAA;AAAA,MAAW,CAAC,UAAA,KAC3B,IAAA,CAAK,KAAA,CAAM;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAA,EAAS,IAAA,CAAK,QAAA,CAAS,UAAU,EAAE,OAAO,CAAA;AAAA,QAC1C;AAAA,OACA;AAAA,KACF;AAAA,EACD;AACD,CAAA;AAtBiD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA1C,IAAM,YAAA,GAAN;AAwBP,KAAK,SAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,MAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CoreDate.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { resolveDate } from '../lib/resolvers/date';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<Date> {\n\tprivate readonly messages = {\n\t\t[Identifiers.ArgumentDateTooEarly]: ({ minimum }: Argument.Context) => `The given date must be after ${new Date(minimum!).toISOString()}.`,\n\t\t[Identifiers.ArgumentDateTooFar]: ({ maximum }: Argument.Context) => `The given date must be before ${new Date(maximum!).toISOString()}.`,\n\t\t[Identifiers.ArgumentDateError]: () => 'The argument did not resolve to a date.'\n\t} as const;\n\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'date' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<Date> {\n\t\tconst resolved = resolveDate(parameter, { minimum: context.minimum, maximum: context.maximum });\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: this.messages[identifier](context),\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'date',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}