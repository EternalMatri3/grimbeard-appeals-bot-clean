{"version":3,"sources":["../../../src/arguments/CoreHyperlink.ts"],"names":[],"mappings":";;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqB,QAAA,CAAc;AAAA,EACxC,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,IAAA,EAAM,WAAA,EAAa,SAAS,CAAC,KAAK,GAAG,CAAA;AAAA,EACvD;AAAA,EAEO,GAAA,CAAI,WAAmB,OAAA,EAAiD;AAC9E,IAAA,MAAM,QAAA,GAAW,iBAAiB,SAAS,CAAA;AAC3C,IAAA,OAAO,QAAA,CAAS,UAAA;AAAA,MAAW,CAAC,UAAA,KAC3B,IAAA,CAAK,KAAA,CAAM;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAA,EAAS,8CAAA;AAAA,QACT;AAAA,OACA;AAAA,KACF;AAAA,EACD;AACD,CAAA;AAhBgD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAzC,IAAM,YAAA,GAAN;AAkBP,KAAK,SAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,WAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CoreHyperlink.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { URL } from 'node:url';\nimport { resolveHyperlink } from '../lib/resolvers/hyperlink';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<URL> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'hyperlink', aliases: ['url'] });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<URL> {\n\t\tconst resolved = resolveHyperlink(parameter);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The argument did not resolve to a valid URL.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'hyperlink',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}