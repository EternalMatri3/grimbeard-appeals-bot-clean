{"version":3,"sources":["../../../src/preconditions/ClientPermissions.ts"],"names":[],"mappings":"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","file":"ClientPermissions.mjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { isNullish } from '@sapphire/utilities';\nimport {\n\tBaseInteraction,\n\tChatInputCommandInteraction,\n\tContextMenuCommandInteraction,\n\tPermissionFlagsBits,\n\tPermissionsBitField,\n\ttype Message,\n\ttype PermissionsString,\n\ttype TextBasedChannel\n} from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport type { Command } from '../lib/structures/Command';\nimport { AllFlowsPrecondition } from '../lib/structures/Precondition';\n\nexport interface PermissionPreconditionContext extends AllFlowsPrecondition.Context {\n\tpermissions?: PermissionsBitField;\n}\n\nexport class CorePrecondition extends AllFlowsPrecondition {\n\tprivate readonly dmChannelPermissions = new PermissionsBitField(\n\t\t~new PermissionsBitField([\n\t\t\t//\n\t\t\tPermissionFlagsBits.AddReactions,\n\t\t\tPermissionFlagsBits.AttachFiles,\n\t\t\tPermissionFlagsBits.EmbedLinks,\n\t\t\tPermissionFlagsBits.ReadMessageHistory,\n\t\t\tPermissionFlagsBits.SendMessages,\n\t\t\tPermissionFlagsBits.UseExternalEmojis,\n\t\t\tPermissionFlagsBits.ViewChannel\n\t\t]).bitfield & PermissionsBitField.All\n\t).freeze();\n\n\tpublic async messageRun(message: Message, _: Command, context: PermissionPreconditionContext): AllFlowsPrecondition.AsyncResult {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\t\tconst { channel } = message;\n\n\t\tif (!message.client.id) {\n\t\t\treturn this.error({\n\t\t\t\tidentifier: Identifiers.PreconditionClientPermissionsNoClient,\n\t\t\t\tmessage: 'There was no client to validate the permissions for.'\n\t\t\t});\n\t\t}\n\n\t\tconst permissions = await this.getPermissionsForChannel(channel, message);\n\n\t\treturn this.sharedRun(required, permissions, 'message');\n\t}\n\n\tpublic async chatInputRun(\n\t\tinteraction: ChatInputCommandInteraction,\n\t\t_: Command,\n\t\tcontext: PermissionPreconditionContext\n\t): AllFlowsPrecondition.AsyncResult {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\n\t\tconst availablePermissions = await this.getAvailablePermissions(interaction);\n\n\t\treturn this.sharedRun(required, availablePermissions, 'chat input');\n\t}\n\n\tpublic async contextMenuRun(\n\t\tinteraction: ContextMenuCommandInteraction,\n\t\t_: Command,\n\t\tcontext: PermissionPreconditionContext\n\t): AllFlowsPrecondition.AsyncResult {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\n\t\tconst availablePermissions = await this.getAvailablePermissions(interaction);\n\n\t\treturn this.sharedRun(required, availablePermissions, 'context menu');\n\t}\n\n\tprivate async getPermissionsForChannel(channel: TextBasedChannel, messageOrInteraction: Message | BaseInteraction) {\n\t\tlet permissions: PermissionsBitField | null = this.dmChannelPermissions;\n\n\t\tif (messageOrInteraction.inGuild() && !channel.isDMBased()) {\n\t\t\tif (isNullish(messageOrInteraction.applicationId)) {\n\t\t\t\tconst me = await messageOrInteraction.guild?.members.fetchMe();\n\t\t\t\tif (me) {\n\t\t\t\t\tpermissions = channel.permissionsFor(me);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpermissions = channel.permissionsFor(messageOrInteraction.applicationId);\n\t\t\t\tif (isNullish(permissions)) {\n\t\t\t\t\tconst me = await messageOrInteraction.guild?.members.fetchMe();\n\t\t\t\t\tif (me) {\n\t\t\t\t\t\tpermissions = channel.permissionsFor(me);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn permissions;\n\t}\n\n\tprivate sharedRun(requiredPermissions: PermissionsBitField, availablePermissions: PermissionsBitField | null, commandType: string) {\n\t\tif (!availablePermissions) {\n\t\t\treturn this.error({\n\t\t\t\tidentifier: Identifiers.PreconditionClientPermissionsNoPermissions,\n\t\t\t\tmessage: `I was unable to resolve my permissions in the ${commandType} command invocation channel.`\n\t\t\t});\n\t\t}\n\n\t\tconst missing = availablePermissions.missing(requiredPermissions);\n\t\treturn missing.length === 0\n\t\t\t? this.ok()\n\t\t\t: this.error({\n\t\t\t\t\tidentifier: Identifiers.PreconditionClientPermissions,\n\t\t\t\t\tmessage: `I am missing the following permissions to run this command: ${missing\n\t\t\t\t\t\t.map((perm) => CorePrecondition.readablePermissions[perm])\n\t\t\t\t\t\t.join(', ')}`,\n\t\t\t\t\tcontext: { missing }\n\t\t\t\t});\n\t}\n\n\tprivate async getAvailablePermissions(interaction: ChatInputCommandInteraction | ContextMenuCommandInteraction) {\n\t\tif (interaction.channel) {\n\t\t\tif (interaction.channel.isDMBased()) return this.dmChannelPermissions;\n\n\t\t\tconst channel = await this.fetchChannelFromInteraction(interaction);\n\t\t\treturn this.getPermissionsForChannel(channel, interaction);\n\t\t}\n\n\t\treturn interaction.appPermissions;\n\t}\n\n\tpublic static readonly readablePermissions: Record<PermissionsString, string> = {\n\t\tAddReactions: 'Add Reactions',\n\t\tAdministrator: 'Administrator',\n\t\tAttachFiles: 'Attach Files',\n\t\tBanMembers: 'Ban Members',\n\t\tChangeNickname: 'Change Nickname',\n\t\tConnect: 'Connect',\n\t\tCreateEvents: 'Create Events',\n\t\tCreateGuildExpressions: 'Create Expressions',\n\t\tCreateInstantInvite: 'Create Instant Invite',\n\t\tCreatePrivateThreads: 'Create Private Threads',\n\t\tCreatePublicThreads: 'Create Public Threads',\n\t\tDeafenMembers: 'Deafen Members',\n\t\tEmbedLinks: 'Embed Links',\n\t\tKickMembers: 'Kick Members',\n\t\tManageChannels: 'Manage Channels',\n\t\tManageEmojisAndStickers: 'Manage Emojis and Stickers',\n\t\tManageEvents: 'Manage Events',\n\t\tManageGuild: 'Manage Server',\n\t\tManageGuildExpressions: 'Manage Guild Expressions',\n\t\tManageMessages: 'Manage Messages',\n\t\tManageNicknames: 'Manage Nicknames',\n\t\tManageRoles: 'Manage Roles',\n\t\tManageThreads: 'Manage Threads',\n\t\tManageWebhooks: 'Manage Webhooks',\n\t\tMentionEveryone: 'Mention Everyone',\n\t\tModerateMembers: 'Moderate Members',\n\t\tMoveMembers: 'Move Members',\n\t\tMuteMembers: 'Mute Members',\n\t\tPinMessages: 'Pin Messages',\n\t\tPrioritySpeaker: 'Priority Speaker',\n\t\tReadMessageHistory: 'Read Message History',\n\t\tRequestToSpeak: 'Request to Speak',\n\t\tSendMessages: 'Send Messages',\n\t\tSendMessagesInThreads: 'Send Messages in Threads',\n\t\tSendPolls: 'Create Polls',\n\t\tSendTTSMessages: 'Send TTS Messages',\n\t\tSendVoiceMessages: 'Send Voice Messages',\n\t\tSpeak: 'Speak',\n\t\tStream: 'Stream',\n\t\tUseApplicationCommands: 'Use Application Commands',\n\t\tUseEmbeddedActivities: 'Start Activities',\n\t\tUseExternalApps: 'Use External Apps',\n\t\tUseExternalEmojis: 'Use External Emojis',\n\t\tUseExternalSounds: 'Use External Sounds',\n\t\tUseExternalStickers: 'Use External Stickers',\n\t\tUseSoundboard: 'Use Soundboard',\n\t\tUseVAD: 'Use Voice Activity',\n\t\tViewAuditLog: 'View Audit Log',\n\t\tViewChannel: 'Read Messages',\n\t\tViewCreatorMonetizationAnalytics: 'View Creator Monetization Analytics',\n\t\tViewGuildInsights: 'View Guild Insights'\n\t};\n}\n\nvoid container.stores.loadPiece({\n\tname: 'ClientPermissions',\n\tpiece: CorePrecondition,\n\tstore: 'preconditions'\n});\n"]}