{"version":3,"sources":["../../../src/preconditions/GuildThreadOnly.ts"],"names":["AllFlowsPrecondition","Identifiers","container"],"mappings":";;;;;;;;AAKO,IAAM,iBAAA,GAAN,MAAM,iBAAA,SAAyBA,qCAAA,CAAqB;AAAA,EACnD,WAAW,OAAA,EAA+C;AAChE,IAAA,OAAO,QAAQ,MAAA,GAAS,IAAA,CAAK,EAAA,EAAG,GAAI,KAAK,eAAA,EAAgB;AAAA,EAC1D;AAAA,EAEA,MAAa,aAAa,WAAA,EAA4E;AACrG,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,2BAAA,CAA4B,WAAW,CAAA;AAClE,IAAA,OAAO,QAAQ,QAAA,EAAS,GAAI,KAAK,EAAA,EAAG,GAAI,KAAK,eAAA,EAAgB;AAAA,EAC9D;AAAA,EAEA,MAAa,eAAe,WAAA,EAA8E;AACzG,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,2BAAA,CAA4B,WAAW,CAAA;AAClE,IAAA,OAAO,QAAQ,QAAA,EAAS,GAAI,KAAK,EAAA,EAAG,GAAI,KAAK,eAAA,EAAgB;AAAA,EAC9D;AAAA,EAEQ,eAAA,GAA+C;AACtD,IAAA,OAAO,KAAK,KAAA,CAAM;AAAA,MACjB,YAAYC,2BAAA,CAAY,sBAAA;AAAA,MACxB,OAAA,EAAS;AAAA,KACT,CAAA;AAAA,EACF;AACD,CAAA;AArB2D,MAAA,CAAA,iBAAA,EAAA,kBAAA,CAAA;AAApD,IAAM,gBAAA,GAAN;AAuBP,KAAKC,gBAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,iBAAA;AAAA,EACN,KAAA,EAAO,gBAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"GuildThreadOnly.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ChatInputCommandInteraction, ContextMenuCommandInteraction, Message } from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { AllFlowsPrecondition } from '../lib/structures/Precondition';\n\nexport class CorePrecondition extends AllFlowsPrecondition {\n\tpublic messageRun(message: Message): AllFlowsPrecondition.Result {\n\t\treturn message.thread ? this.ok() : this.makeSharedError();\n\t}\n\n\tpublic async chatInputRun(interaction: ChatInputCommandInteraction): AllFlowsPrecondition.AsyncResult {\n\t\tconst channel = await this.fetchChannelFromInteraction(interaction);\n\t\treturn channel.isThread() ? this.ok() : this.makeSharedError();\n\t}\n\n\tpublic async contextMenuRun(interaction: ContextMenuCommandInteraction): AllFlowsPrecondition.AsyncResult {\n\t\tconst channel = await this.fetchChannelFromInteraction(interaction);\n\t\treturn channel.isThread() ? this.ok() : this.makeSharedError();\n\t}\n\n\tprivate makeSharedError(): AllFlowsPrecondition.Result {\n\t\treturn this.error({\n\t\t\tidentifier: Identifiers.PreconditionThreadOnly,\n\t\t\tmessage: 'You can only run this command in server thread channels.'\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'GuildThreadOnly',\n\tpiece: CorePrecondition,\n\tstore: 'preconditions'\n});\n"]}