{"version":3,"sources":["../../../../src/listeners/application-commands/CorePossibleAutocompleteInteraction.ts"],"names":["Listener","Events","container"],"mappings":";;;;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAA,CAAwD;AAAA,EAClF,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAOC,iBAAA,CAAO,iCAAiC,CAAA;AAAA,EACjE;AAAA,EAEA,MAAa,IAAI,WAAA,EAAsC;AACtD,IAAA,MAAM,EAAE,MAAA,EAAO,GAAI,IAAA,CAAK,SAAA;AAExB,IAAA,MAAM,YAAA,GAAe,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA;AAG1C,IAAA,MAAM,OAAA,GAAU,aAAa,GAAA,CAAI,WAAA,CAAY,SAAS,CAAA,IAAK,YAAA,CAAa,GAAA,CAAI,WAAA,CAAY,WAAW,CAAA;AAEnG,IAAA,IAAI,SAAS,eAAA,EAAiB;AAC7B,MAAA,IAAI;AACH,QAAA,MAAM,OAAA,CAAQ,gBAAgB,WAAW,CAAA;AACzC,QAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAKA,iBAAA,CAAO,qCAAA,EAAuC;AAAA,UACxE,OAAA;AAAA,UACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAA,EAAW,WAAA,EAAa,YAAY,WAAA,EAAY;AAAA,UAClF;AAAA,SACA,CAAA;AAAA,MACF,SAAS,GAAA,EAAK;AACb,QAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAKA,iBAAA,CAAO,qCAAqC,GAAA,EAAK;AAAA,UAC3E,OAAA;AAAA,UACA,SAAS,EAAE,SAAA,EAAW,YAAY,SAAA,EAAW,WAAA,EAAa,YAAY,WAAA,EAAY;AAAA,UAClF;AAAA,SACA,CAAA;AAAA,MACF;AACA,MAAA;AAAA,IACD;AAGA,IAAA,MAAM,KAAK,SAAA,CAAU,MAAA,CAAO,IAAI,sBAAsB,CAAA,CAAE,IAAI,WAAW,CAAA;AAAA,EACxE;AACD,CAAA;AAlC0F,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAnF,IAAM,YAAA,GAAN;AAoCP,KAAKC,gBAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,qCAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CorePossibleAutocompleteInteraction.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { AutocompleteInteraction } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport type { AutocompleteCommand } from '../../lib/types/CommandTypes';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PossibleAutocompleteInteraction> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PossibleAutocompleteInteraction });\n\t}\n\n\tpublic async run(interaction: AutocompleteInteraction) {\n\t\tconst { stores } = this.container;\n\n\t\tconst commandStore = stores.get('commands');\n\n\t\t// Try resolving in command\n\t\tconst command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);\n\n\t\tif (command?.autocompleteRun) {\n\t\t\ttry {\n\t\t\t\tawait command.autocompleteRun(interaction);\n\t\t\t\tthis.container.client.emit(Events.CommandAutocompleteInteractionSuccess, {\n\t\t\t\t\tcommand: command as AutocompleteCommand,\n\t\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\t\t\tinteraction\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tthis.container.client.emit(Events.CommandAutocompleteInteractionError, err, {\n\t\t\t\t\tcommand: command as AutocompleteCommand,\n\t\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\t\t\tinteraction\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Unless we ran a command handler, always call interaction handlers with the interaction\n\t\tawait this.container.stores.get('interaction-handlers').run(interaction);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePossibleAutocompleteInteraction',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}