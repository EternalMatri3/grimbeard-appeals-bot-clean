{"version":3,"sources":["../../../../../src/listeners/application-commands/chat-input/CoreChatInputCommandAccepted.ts"],"names":["Listener","Events","result","Result","stopwatch","Stopwatch","container"],"mappings":";;;;;;;;;;AAMO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAA,CAAiD;AAAA,EAC3E,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAOC,iBAAA,CAAO,0BAA0B,CAAA;AAAA,EAC1D;AAAA,EAEA,MAAa,IAAI,OAAA,EAA0C;AAC1D,IAAA,MAAM,EAAE,OAAA,EAAS,OAAA,EAAS,WAAA,EAAY,GAAI,OAAA;AAE1C,IAAA,MAAMC,QAAA,GAAS,MAAMC,aAAA,CAAO,SAAA,CAAU,YAAY;AACjD,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAKF,iBAAA,CAAO,mBAAA,EAAqB,aAAa,OAAA,EAAS,EAAE,GAAG,OAAA,EAAS,CAAA;AAE3F,MAAA,MAAMG,WAAA,GAAY,IAAIC,mBAAA,EAAU;AAChC,MAAA,MAAMH,OAAAA,GAAS,MAAM,OAAA,CAAQ,YAAA,CAAa,aAAa,OAAO,CAAA;AAC9D,MAAA,MAAM,EAAE,QAAA,EAAS,GAAIE,WAAA,CAAU,IAAA,EAAK;AAEpC,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,IAAA,CAAKH,iBAAA,CAAO,uBAAA,EAAyB,EAAE,GAAG,OAAA,EAAS,MAAA,EAAAC,OAAAA,EAAQ,QAAA,EAAU,CAAA;AAE3F,MAAA,OAAO,QAAA;AAAA,IACR,CAAC,CAAA;AAED,IAAAA,QAAA,CAAO,WAAW,CAAC,KAAA,KAAU,IAAA,CAAK,SAAA,CAAU,OAAO,IAAA,CAAKD,iBAAA,CAAO,qBAAA,EAAuB,KAAA,EAAO,EAAE,GAAG,OAAA,EAAS,QAAA,EAAU,EAAA,EAAI,CAAC,CAAA;AAE1H,IAAA,IAAA,CAAK,UAAU,MAAA,CAAO,IAAA,CAAKA,iBAAA,CAAO,sBAAA,EAAwB,aAAa,OAAA,EAAS;AAAA,MAC/E,GAAG,OAAA;AAAA,MACH,OAAA,EAASC,SAAO,IAAA,EAAK;AAAA,MACrB,QAAA,EAAUA,QAAA,CAAO,QAAA,CAAS,EAAE;AAAA,KAC5B,CAAA;AAAA,EACF;AACD,CAAA;AA5BmF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA5E,IAAM,YAAA,GAAN;AA8BP,KAAKI,gBAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,8BAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CoreChatInputCommandAccepted.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport { Stopwatch } from '@sapphire/stopwatch';\nimport { Listener } from '../../../lib/structures/Listener';\nimport { Events, type ChatInputCommandAcceptedPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ChatInputCommandAccepted> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ChatInputCommandAccepted });\n\t}\n\n\tpublic async run(payload: ChatInputCommandAcceptedPayload) {\n\t\tconst { command, context, interaction } = payload;\n\n\t\tconst result = await Result.fromAsync(async () => {\n\t\t\tthis.container.client.emit(Events.ChatInputCommandRun, interaction, command, { ...payload });\n\n\t\t\tconst stopwatch = new Stopwatch();\n\t\t\tconst result = await command.chatInputRun(interaction, context);\n\t\t\tconst { duration } = stopwatch.stop();\n\n\t\t\tthis.container.client.emit(Events.ChatInputCommandSuccess, { ...payload, result, duration });\n\n\t\t\treturn duration;\n\t\t});\n\n\t\tresult.inspectErr((error) => this.container.client.emit(Events.ChatInputCommandError, error, { ...payload, duration: -1 }));\n\n\t\tthis.container.client.emit(Events.ChatInputCommandFinish, interaction, command, {\n\t\t\t...payload,\n\t\t\tsuccess: result.isOk(),\n\t\t\tduration: result.unwrapOr(-1)\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CoreChatInputCommandAccepted',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}