{"version":3,"sources":["../../../src/arguments/CoreChannel.ts"],"names":["Argument","resolveChannel","container"],"mappings":";;;;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAA,CAAuB;AAAA,EACjD,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,IAAA,EAAM,SAAA,EAAW,CAAA;AAAA,EACnC;AAAA,EAEO,GAAA,CAAI,WAAmB,OAAA,EAA0D;AACvF,IAAA,MAAM,QAAA,GAAWC,0BAAA,CAAe,SAAA,EAAW,OAAA,CAAQ,OAAO,CAAA;AAC1D,IAAA,OAAO,QAAA,CAAS,UAAA;AAAA,MAAW,CAAC,UAAA,KAC3B,IAAA,CAAK,KAAA,CAAM;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAA,EAAS,4CAAA;AAAA,QACT;AAAA,OACA;AAAA,KACF;AAAA,EACD;AACD,CAAA;AAhByD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAlD,IAAM,YAAA,GAAN;AAkBP,KAAKC,gBAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,SAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CoreChannel.cjs","sourcesContent":["import type { ChannelTypes } from '@sapphire/discord.js-utilities';\nimport { container } from '@sapphire/pieces';\nimport { resolveChannel } from '../lib/resolvers/channel';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<ChannelTypes> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'channel' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<ChannelTypes> {\n\t\tconst resolved = resolveChannel(parameter, context.message);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The argument did not resolve to a channel.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'channel',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}