{"version":3,"sources":["../../../src/arguments/CoreInteger.ts"],"names":["Argument","Identifiers","resolveInteger","container"],"mappings":";;;;;;;;;AAKO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAA,CAAiB;AAAA,EAO3C,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,IAAA,EAAM,SAAA,EAAW,CAAA;AAPnC,IAAA,IAAA,CAAiB,QAAA,GAAW;AAAA,MAC3B,CAACC,4BAAY,uBAAuB,GAAG,CAAC,EAAE,OAAA,EAAQ,KAAwB,CAAA,sCAAA,EAAyC,OAAO,CAAA,CAAA,CAAA;AAAA,MAC1H,CAACA,4BAAY,uBAAuB,GAAG,CAAC,EAAE,OAAA,EAAQ,KAAwB,CAAA,mCAAA,EAAsC,OAAO,CAAA,CAAA,CAAA;AAAA,MACvH,CAACA,2BAAA,CAAY,oBAAoB,GAAG,MAAM;AAAA,KAC3C;AAAA,EAIA;AAAA,EAEO,GAAA,CAAI,WAAmB,OAAA,EAAoD;AACjF,IAAA,MAAM,QAAA,GAAWC,0BAAA,CAAe,SAAA,EAAW,EAAE,OAAA,EAAS,QAAQ,OAAA,EAAS,OAAA,EAAS,OAAA,CAAQ,OAAA,EAAS,CAAA;AACjG,IAAA,OAAO,QAAA,CAAS,UAAA;AAAA,MAAW,CAAC,UAAA,KAC3B,IAAA,CAAK,KAAA,CAAM;AAAA,QACV,SAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAA,EAAS,IAAA,CAAK,QAAA,CAAS,UAAU,EAAE,OAAO,CAAA;AAAA,QAC1C;AAAA,OACA;AAAA,KACF;AAAA,EACD;AACD,CAAA;AAtBmD,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAA5C,IAAM,YAAA,GAAN;AAwBP,KAAKC,gBAAA,CAAU,OAAO,SAAA,CAAU;AAAA,EAC/B,IAAA,EAAM,SAAA;AAAA,EACN,KAAA,EAAO,YAAA;AAAA,EACP,KAAA,EAAO;AACR,CAAC,CAAA","file":"CoreInteger.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { resolveInteger } from '../lib/resolvers/integer';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<number> {\n\tprivate readonly messages = {\n\t\t[Identifiers.ArgumentIntegerTooSmall]: ({ minimum }: Argument.Context) => `The given number must be greater than ${minimum}.`,\n\t\t[Identifiers.ArgumentIntegerTooLarge]: ({ maximum }: Argument.Context) => `The given number must be less than ${maximum}.`,\n\t\t[Identifiers.ArgumentIntegerError]: () => 'The argument did not resolve to a valid number.'\n\t} as const;\n\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'integer' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<number> {\n\t\tconst resolved = resolveInteger(parameter, { minimum: context.minimum, maximum: context.maximum });\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: this.messages[identifier](context),\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'integer',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}