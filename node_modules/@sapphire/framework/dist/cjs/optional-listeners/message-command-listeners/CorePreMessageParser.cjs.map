{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePreMessageParser.ts"],"names":["Listener","Events","PermissionsBitField","PermissionFlagsBits","ChannelType","isDMChannel"],"mappings":"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","file":"CorePreMessageParser.cjs","sourcesContent":["import { isDMChannel } from '@sapphire/discord.js-utilities';\nimport { ChannelType, PermissionFlagsBits, PermissionsBitField, type Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreMessageParsed> {\n\tprivate readonly requiredPermissions = new PermissionsBitField([PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]).freeze();\n\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreMessageParsed });\n\t}\n\n\tpublic async run(message: Message) {\n\t\t// If the bot cannot run the command due to lack of permissions, return.\n\t\tconst canRun = await this.canRunInChannel(message);\n\t\tif (!canRun) return;\n\n\t\tlet prefix: string | null | RegExp = null;\n\t\tconst mentionPrefix = this.getMentionPrefix(message);\n\t\tconst { client } = this.container;\n\t\tconst { regexPrefix } = client.options;\n\n\t\tif (mentionPrefix) {\n\t\t\tif (message.content.length === mentionPrefix.length) {\n\t\t\t\tclient.emit(Events.MentionPrefixOnly, message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprefix = mentionPrefix;\n\t\t} else if (regexPrefix?.test(message.content)) {\n\t\t\tprefix = regexPrefix;\n\t\t} else {\n\t\t\tconst prefixes = await client.fetchPrefix(message);\n\t\t\tconst parsed = this.getPrefix(message.content, prefixes);\n\t\t\tif (parsed !== null) prefix = parsed;\n\t\t}\n\n\t\tif (prefix === null) client.emit(Events.NonPrefixedMessage, message);\n\t\telse client.emit(Events.PrefixedMessage, message, prefix);\n\t}\n\n\tprivate async canRunInChannel(message: Message): Promise<boolean> {\n\t\tif (message.channel.type === ChannelType.GroupDM) return false;\n\t\tif (isDMChannel(message.channel)) return true;\n\n\t\tconst me = await message.guild?.members.fetchMe();\n\t\tif (!me) return false;\n\n\t\tconst { channel } = message;\n\t\tconst permissionsFor = channel.permissionsFor(me);\n\t\tif (!permissionsFor) return false;\n\n\t\treturn permissionsFor.has(this.requiredPermissions, true);\n\t}\n\n\tprivate getMentionPrefix(message: Message): string | null {\n\t\tif (this.container.client.disableMentionPrefix) return null;\n\t\t// If the content is shorter than 20 characters, or does not start with `<@` then skip early:\n\t\tif (message.content.length < 20 || !message.content.startsWith('<@')) return null;\n\n\t\t// Calculate the offset and the ID that is being provided\n\t\tconst [offset, id] =\n\t\t\tmessage.content[2] === '&'\n\t\t\t\t? [3, message.guild?.roles.botRoleFor(this.container.client.id!)?.id]\n\t\t\t\t: [message.content[2] === '!' ? 3 : 2, this.container.client.id];\n\n\t\tif (!id) return null;\n\n\t\tconst offsetWithId = offset + id.length;\n\n\t\t// If the mention doesn't end with `>`, skip early:\n\t\tif (message.content[offsetWithId] !== '>') return null;\n\n\t\t// Check whether or not the ID is the same as the managed role ID:\n\t\tconst mentionId = message.content.substring(offset, offsetWithId);\n\t\tif (mentionId === id) return message.content.substring(0, offsetWithId + 1);\n\n\t\treturn null;\n\t}\n\n\tprivate getPrefix(content: string, prefixes: readonly string[] | string | null): string | null {\n\t\tif (prefixes === null) return null;\n\t\tconst { caseInsensitivePrefixes } = this.container.client.options;\n\n\t\tif (caseInsensitivePrefixes) content = content.toLowerCase();\n\n\t\tif (typeof prefixes === 'string') {\n\t\t\treturn content.startsWith(caseInsensitivePrefixes ? prefixes.toLowerCase() : prefixes) ? prefixes : null;\n\t\t}\n\n\t\treturn prefixes.find((prefix) => content.startsWith(caseInsensitivePrefixes ? prefix.toLowerCase() : prefix)) ?? null;\n\t}\n}\n"]}