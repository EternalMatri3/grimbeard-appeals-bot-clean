{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePreMessageCommandRun.ts"],"names":["Listener","Events"],"mappings":";;;;;;;AAGO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAA,CAA6C;AAAA,EACvE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAOC,iBAAA,CAAO,sBAAsB,CAAA;AAAA,EACtD;AAAA,EAEA,MAAa,IAAI,OAAA,EAAsC;AACtD,IAAA,MAAM,EAAE,OAAA,EAAS,OAAA,EAAQ,GAAI,OAAA;AAG7B,IAAA,MAAM,YAAA,GAAe,MAAM,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,GAAA,CAAI,eAAe,CAAA,CAAE,UAAA,CAAW,OAAA,EAAS,OAAA,EAAS,OAAc,CAAA;AACjH,IAAA,IAAI,YAAA,CAAa,OAAM,EAAG;AACzB,MAAA,OAAA,CAAQ,OAAO,IAAA,CAAKA,iBAAA,CAAO,sBAAsB,YAAA,CAAa,SAAA,IAAa,OAAO,CAAA;AAClF,MAAA;AAAA,IACD;AAGA,IAAA,MAAM,cAAc,MAAM,OAAA,CAAQ,cAAc,UAAA,CAAW,OAAA,EAAS,SAAS,OAAc,CAAA;AAC3F,IAAA,IAAI,WAAA,CAAY,OAAM,EAAG;AACxB,MAAA,OAAA,CAAQ,OAAO,IAAA,CAAKA,iBAAA,CAAO,sBAAsB,WAAA,CAAY,SAAA,IAAa,OAAO,CAAA;AACjF,MAAA;AAAA,IACD;AAEA,IAAA,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAKA,iBAAA,CAAO,sBAAA,EAAwB,OAAO,CAAA;AAAA,EAC3D;AACD,CAAA;AAxB+E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAxE,IAAM,YAAA,GAAN","file":"CorePreMessageCommandRun.cjs","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type PreMessageCommandRunPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreMessageCommandRun> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreMessageCommandRun });\n\t}\n\n\tpublic async run(payload: PreMessageCommandRunPayload) {\n\t\tconst { message, command } = payload;\n\n\t\t// Run global preconditions:\n\t\tconst globalResult = await this.container.stores.get('preconditions').messageRun(message, command, payload as any);\n\t\tif (globalResult.isErr()) {\n\t\t\tmessage.client.emit(Events.MessageCommandDenied, globalResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\t// Run command-specific preconditions:\n\t\tconst localResult = await command.preconditions.messageRun(message, command, payload as any);\n\t\tif (localResult.isErr()) {\n\t\t\tmessage.client.emit(Events.MessageCommandDenied, localResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\tmessage.client.emit(Events.MessageCommandAccepted, payload);\n\t}\n}\n"]}