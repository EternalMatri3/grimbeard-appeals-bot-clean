{"version":3,"sources":["../../../../src/optional-listeners/error-listeners/CoreChatInputCommandError.ts"],"names":["Listener","Events"],"mappings":";;;;;;;AAGO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAA,CAA8C;AAAA,EACxE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAOC,iBAAA,CAAO,uBAAuB,CAAA;AAAA,EACvD;AAAA,EAEO,GAAA,CAAI,OAAgB,OAAA,EAAuC;AACjE,IAAA,MAAM,EAAE,IAAA,EAAM,QAAA,EAAS,GAAI,OAAA,CAAQ,OAAA;AACnC,IAAA,IAAA,CAAK,SAAA,CAAU,OAAO,KAAA,CAAM,CAAA,yCAAA,EAA4C,IAAI,CAAA,WAAA,EAAc,QAAA,CAAS,IAAI,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA,EAClH;AACD,CAAA;AATgF,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAzE,IAAM,YAAA,GAAN","file":"CoreChatInputCommandError.cjs","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type ChatInputCommandErrorPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ChatInputCommandError> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ChatInputCommandError });\n\t}\n\n\tpublic run(error: unknown, context: ChatInputCommandErrorPayload) {\n\t\tconst { name, location } = context.command;\n\t\tthis.container.logger.error(`Encountered error on chat input command \"${name}\" at path \"${location.full}\"`, error);\n\t}\n}\n"]}