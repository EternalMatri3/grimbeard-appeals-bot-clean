{"version":3,"sources":["../../../../src/optional-listeners/error-listeners/CoreMessageCommandError.ts"],"names":["Listener","Events"],"mappings":";;;;;;;AAGO,IAAM,aAAA,GAAN,MAAM,aAAA,SAAqBA,qBAAA,CAA4C;AAAA,EACtE,YAAY,OAAA,EAAiC;AACnD,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAOC,iBAAA,CAAO,qBAAqB,CAAA;AAAA,EACrD;AAAA,EAEO,GAAA,CAAI,OAAgB,OAAA,EAAqC;AAC/D,IAAA,MAAM,EAAE,IAAA,EAAM,QAAA,EAAS,GAAI,OAAA,CAAQ,OAAA;AACnC,IAAA,IAAA,CAAK,SAAA,CAAU,OAAO,KAAA,CAAM,CAAA,sCAAA,EAAyC,IAAI,CAAA,WAAA,EAAc,QAAA,CAAS,IAAI,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA,EAC/G;AACD,CAAA;AAT8E,MAAA,CAAA,aAAA,EAAA,cAAA,CAAA;AAAvE,IAAM,YAAA,GAAN","file":"CoreMessageCommandError.cjs","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type MessageCommandErrorPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.MessageCommandError> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.MessageCommandError });\n\t}\n\n\tpublic run(error: unknown, context: MessageCommandErrorPayload) {\n\t\tconst { name, location } = context.command;\n\t\tthis.container.logger.error(`Encountered error on message command \"${name}\" at path \"${location.full}\"`, error);\n\t}\n}\n"]}