{"version":3,"sources":["../../../../../src/lib/utils/application-commands/getNeededParameters.ts"],"names":["container"],"mappings":";;;;;;AAGA,eAAsB,2BAAA,CAA4B,QAAA,mBAAwB,IAAI,GAAA,EAAI,EAAG;AACpF,EAAA,MAAM,EAAE,QAAO,GAAIA,gBAAA;AAEnB,EAAA,MAAM,mBAAA,GAAsB,OAAO,WAAA,CAAa,QAAA;AAChD,EAAA,MAAM,iBAAiB,MAAM,mBAAA,CAAoB,MAAM,EAAE,iBAAA,EAAmB,MAAM,CAAA;AAClF,EAAA,MAAM,aAAA,GAAgB,MAAM,kBAAA,CAAmB,mBAAA,EAAqB,QAAQ,CAAA;AAE5E,EAAA,OAAO;AAAA,IACN,mBAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA,GACD;AACD;AAZsB,MAAA,CAAA,2BAAA,EAAA,6BAAA,CAAA;AActB,eAAe,kBAAA,CAAmB,UAAqC,QAAA,EAAuB;AAC7F,EAAA,MAAM,GAAA,uBAAU,GAAA,EAAoD;AAEpE,EAAA,KAAA,MAAW,WAAW,QAAA,EAAU;AAC/B,IAAA,IAAI;AACH,MAAA,MAAM,aAAA,GAAgB,MAAM,QAAA,CAAS,KAAA,CAAM,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAM,CAAA;AAC/E,MAAA,GAAA,CAAI,GAAA,CAAI,SAAS,aAAa,CAAA;AAAA,IAC/B,SAAS,GAAA,EAAK;AACb,MAAA,MAAM,EAAE,gCAAA,EAAiC,GAAIA,gBAAA,CAAU,MAAA,CAAO,OAAA;AAE9D,MAAA,IAAI,qCAAqC,IAAA,EAAM;AAE/C,MAAA,IAAI,KAAA,CAAM,QAAQ,gCAAgC,CAAA,IAAK,CAAC,gCAAA,EAAkC,QAAA,CAAS,OAAO,CAAA,EAAG;AAC5G,QAAA,MAAM,KAAA,GAAQA,iBAAU,MAAA,CAAO,MAAA,CAAO,QAAQ,OAAO,CAAA,IAAK,EAAE,IAAA,EAAM,oBAAA,EAAqB;AACvF,QAAAA,gBAAA,CAAU,MAAA,CAAO,IAAA;AAAA,UAChB,CAAA,wEAAA,EAA2E,KAAA,CAAM,IAAI,CAAA,GAAA,EAAM,OAAO,CAAA,EAAA,CAAA;AAAA,UAClG;AAAA,SACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,EAAA,OAAO,GAAA;AACR;AAvBe,MAAA,CAAA,kBAAA,EAAA,oBAAA,CAAA","file":"getNeededParameters.cjs","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ApplicationCommand, ApplicationCommandManager, Collection } from 'discord.js';\n\nexport async function getNeededRegistryParameters(guildIds: Set<string> = new Set()) {\n\tconst { client } = container;\n\n\tconst applicationCommands = client.application!.commands;\n\tconst globalCommands = await applicationCommands.fetch({ withLocalizations: true });\n\tconst guildCommands = await fetchGuildCommands(applicationCommands, guildIds);\n\n\treturn {\n\t\tapplicationCommands,\n\t\tglobalCommands,\n\t\tguildCommands\n\t};\n}\n\nasync function fetchGuildCommands(commands: ApplicationCommandManager, guildIds: Set<string>) {\n\tconst map = new Map<string, Collection<string, ApplicationCommand>>();\n\n\tfor (const guildId of guildIds) {\n\t\ttry {\n\t\t\tconst guildCommands = await commands.fetch({ guildId, withLocalizations: true });\n\t\t\tmap.set(guildId, guildCommands);\n\t\t} catch (err) {\n\t\t\tconst { preventFailedToFetchLogForGuilds } = container.client.options;\n\n\t\t\tif (preventFailedToFetchLogForGuilds === true) continue;\n\n\t\t\tif (Array.isArray(preventFailedToFetchLogForGuilds) && !preventFailedToFetchLogForGuilds?.includes(guildId)) {\n\t\t\t\tconst guild = container.client.guilds.resolve(guildId) ?? { name: 'Guild not in cache' };\n\t\t\t\tcontainer.logger.warn(\n\t\t\t\t\t`ApplicationCommandRegistries: Failed to fetch guild commands for guild \"${guild.name}\" (${guildId}).`,\n\t\t\t\t\t'Make sure to authorize your application with the \"applications.commands\" scope in that guild.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn map;\n}\n"]}