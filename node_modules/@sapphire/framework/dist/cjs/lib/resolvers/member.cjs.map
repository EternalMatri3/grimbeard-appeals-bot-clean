{"version":3,"sources":["../../../../src/lib/resolvers/member.ts"],"names":["isNullish","Result","Identifiers","UserOrMemberMentionRegex","SnowflakeRegex"],"mappings":";;;;;;;;;AAMA,eAAsB,aAAA,CACrB,SAAA,EACA,KAAA,EACA,kBAAA,EACgE;AAChE,EAAA,IAAI,MAAA,GAAS,MAAM,WAAA,CAAY,SAAA,EAAW,KAAK,CAAA;AAE/C,EAAA,IAAIA,mBAAA,CAAU,MAAM,CAAA,IAAK,kBAAA,EAAoB;AAC5C,IAAA,MAAA,GAAS,MAAM,cAAA,CAAe,SAAA,EAAW,KAAK,CAAA;AAAA,EAC/C;AAEA,EAAA,IAAI,MAAA,EAAQ;AACX,IAAA,OAAOC,aAAA,CAAO,GAAG,MAAM,CAAA;AAAA,EACxB;AAEA,EAAA,OAAOA,aAAA,CAAO,GAAA,CAAIC,2BAAA,CAAY,mBAAmB,CAAA;AAClD;AAhBsB,MAAA,CAAA,aAAA,EAAA,eAAA,CAAA;AAkBtB,eAAe,WAAA,CAAY,UAAkB,KAAA,EAA2C;AACvF,EAAA,MAAM,WAAWC,yCAAA,CAAyB,IAAA,CAAK,QAAQ,CAAA,IAAKC,+BAAA,CAAe,KAAK,QAAQ,CAAA;AACxF,EAAA,OAAO,QAAA,GAAW,KAAA,CAAM,OAAA,CAAQ,KAAA,CAAM,QAAA,CAAS,CAAC,CAAc,CAAA,CAAE,KAAA,CAAM,MAAM,IAAI,CAAA,GAAI,IAAA;AACrF;AAHe,MAAA,CAAA,WAAA,EAAA,aAAA,CAAA;AAKf,eAAe,cAAA,CAAe,UAAkB,KAAA,EAA2C;AAC1F,EAAA,QAAA,GAAW,QAAA,CAAS,MAAA,GAAS,CAAA,IAAK,QAAA,CAAS,EAAA,CAAG,EAAE,CAAA,KAAM,GAAA,GAAM,QAAA,CAAS,KAAA,CAAM,CAAA,EAAG,EAAE,CAAA,GAAI,QAAA;AAEpF,EAAA,MAAM,OAAA,GAAU,MAAM,KAAA,CAAM,OAAA,CAAQ,MAAM,EAAE,KAAA,EAAO,QAAA,EAAU,KAAA,EAAO,CAAA,EAAG,CAAA,CAAE,KAAA,CAAM,MAAM,IAAI,CAAA;AACzF,EAAA,OAAO,OAAA,EAAS,OAAM,IAAK,IAAA;AAC5B;AALe,MAAA,CAAA,cAAA,EAAA,gBAAA,CAAA","file":"member.cjs","sourcesContent":["import { SnowflakeRegex, UserOrMemberMentionRegex } from '@sapphire/discord-utilities';\nimport { Result } from '@sapphire/result';\nimport { isNullish } from '@sapphire/utilities';\nimport type { Guild, GuildMember, Snowflake } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport async function resolveMember(\n\tparameter: string,\n\tguild: Guild,\n\tperformFuzzySearch?: boolean\n): Promise<Result<GuildMember, Identifiers.ArgumentMemberError>> {\n\tlet member = await resolveById(parameter, guild);\n\n\tif (isNullish(member) && performFuzzySearch) {\n\t\tmember = await resolveByQuery(parameter, guild);\n\t}\n\n\tif (member) {\n\t\treturn Result.ok(member);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentMemberError);\n}\n\nasync function resolveById(argument: string, guild: Guild): Promise<GuildMember | null> {\n\tconst memberId = UserOrMemberMentionRegex.exec(argument) ?? SnowflakeRegex.exec(argument);\n\treturn memberId ? guild.members.fetch(memberId[1] as Snowflake).catch(() => null) : null;\n}\n\nasync function resolveByQuery(argument: string, guild: Guild): Promise<GuildMember | null> {\n\targument = argument.length > 5 && argument.at(-5) === '#' ? argument.slice(0, -5) : argument;\n\n\tconst members = await guild.members.fetch({ query: argument, limit: 1 }).catch(() => null);\n\treturn members?.first() ?? null;\n}\n"]}