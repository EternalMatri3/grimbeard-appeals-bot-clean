{"version":3,"sources":["../../../../src/lib/resolvers/float.ts"],"names":["Result","Identifiers"],"mappings":";;;;;;;AAGO,SAAS,YAAA,CACf,WACA,OAAA,EACyH;AACzH,EAAA,MAAM,MAAA,GAAS,OAAO,SAAS,CAAA;AAE/B,EAAA,IAAI,MAAA,CAAO,KAAA,CAAM,MAAM,CAAA,EAAG;AACzB,IAAA,OAAOA,aAAA,CAAO,GAAA,CAAIC,2BAAA,CAAY,kBAAkB,CAAA;AAAA,EACjD;AAEA,EAAA,IAAI,OAAO,OAAA,EAAS,OAAA,KAAY,QAAA,IAAY,MAAA,GAAS,QAAQ,OAAA,EAAS;AACrE,IAAA,OAAOD,aAAA,CAAO,GAAA,CAAIC,2BAAA,CAAY,qBAAqB,CAAA;AAAA,EACpD;AAEA,EAAA,IAAI,OAAO,OAAA,EAAS,OAAA,KAAY,QAAA,IAAY,MAAA,GAAS,QAAQ,OAAA,EAAS;AACrE,IAAA,OAAOD,aAAA,CAAO,GAAA,CAAIC,2BAAA,CAAY,qBAAqB,CAAA;AAAA,EACpD;AAEA,EAAA,OAAOD,aAAA,CAAO,GAAG,MAAM,CAAA;AACxB;AAnBgB,MAAA,CAAA,YAAA,EAAA,cAAA,CAAA","file":"float.cjs","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveFloat(\n\tparameter: string,\n\toptions?: { minimum?: number; maximum?: number }\n): Result<number, Identifiers.ArgumentFloatError | Identifiers.ArgumentFloatTooSmall | Identifiers.ArgumentFloatTooLarge> {\n\tconst parsed = Number(parameter);\n\n\tif (Number.isNaN(parsed)) {\n\t\treturn Result.err(Identifiers.ArgumentFloatError);\n\t}\n\n\tif (typeof options?.minimum === 'number' && parsed < options.minimum) {\n\t\treturn Result.err(Identifiers.ArgumentFloatTooSmall);\n\t}\n\n\tif (typeof options?.maximum === 'number' && parsed > options.maximum) {\n\t\treturn Result.err(Identifiers.ArgumentFloatTooLarge);\n\t}\n\n\treturn Result.ok(parsed);\n}\n"]}