{"version":3,"sources":["../../../../src/lib/resolvers/user.ts"],"names":["UserOrMemberMentionRegex","SnowflakeRegex","container","Result","Identifiers"],"mappings":";;;;;;;;;AAMA,eAAsB,YAAY,SAAA,EAAyE;AAC1G,EAAA,MAAM,SAASA,yCAAA,CAAyB,IAAA,CAAK,SAAS,CAAA,IAAKC,+BAAA,CAAe,KAAK,SAAS,CAAA;AACxF,EAAA,MAAM,IAAA,GAAO,MAAA,GAAS,MAAMC,gBAAA,CAAU,OAAO,KAAA,CAAM,KAAA,CAAM,MAAA,CAAO,CAAC,CAAc,CAAA,CAAE,KAAA,CAAM,MAAM,IAAI,CAAA,GAAI,IAAA;AAErG,EAAA,IAAI,IAAA,EAAM;AACT,IAAA,OAAOC,aAAA,CAAO,GAAG,IAAI,CAAA;AAAA,EACtB;AAEA,EAAA,OAAOA,aAAA,CAAO,GAAA,CAAIC,2BAAA,CAAY,iBAAiB,CAAA;AAChD;AATsB,MAAA,CAAA,WAAA,EAAA,aAAA,CAAA","file":"user.cjs","sourcesContent":["import { SnowflakeRegex, UserOrMemberMentionRegex } from '@sapphire/discord-utilities';\nimport { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport type { Snowflake, User } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport async function resolveUser(parameter: string): Promise<Result<User, Identifiers.ArgumentUserError>> {\n\tconst userId = UserOrMemberMentionRegex.exec(parameter) ?? SnowflakeRegex.exec(parameter);\n\tconst user = userId ? await container.client.users.fetch(userId[1] as Snowflake).catch(() => null) : null;\n\n\tif (user) {\n\t\treturn Result.ok(user);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentUserError);\n}\n"]}